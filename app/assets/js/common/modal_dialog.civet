/**
 * ModaleDialog
 * モーダルダイアログを表示するクラス
 */

{app, text, type Subscription, type Action} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom

{modalDialog, type ModalAction} from ~/app/modal.civet
Status from ~/common/status.civet
{getBootstrap, type BsBootstrap, type Modal} from ~/common/bs.civet

declare global
  interface HTMLElementEventMap
    "modaldialog.message": CustomEvent<string>

ModalSize ::= "sm" | "lg" | "xl" | undefined

ModalFullscreen ::= boolean | "sm-down" | "md-down" | "lg-down" | "xl-down" | "xxl-down" | undefined

interface ModalState
    title: #title
    status: #status
    closable: #closable
    action: if #action then {...#action, onclick: #modalAction} else null
    close: #close
    messages: #messages
    value: #value
    shwon: false
    focus: `${#id}-modal-close-button`
    ...state

export default class ModalDialog<S>
  @MESSAGE_EVENT := "modaldialog.message"

  @DEFAULT_ACTION: ModalAction<S> := Object.freeze {
    label: "OK"
    color: "primary"
    side: "right"
  }

  readonly #id: string
  readonly #fade: boolean
  readonly #scrollable: boolean
  readonly #centered: boolean
  readonly #size: ModalSize
  readonly #fullscreen: ModalFullscreen
  readonly #title: string
  readonly #status: Status
  readonly #closable: boolean
  readonly #action: Omit<ModalAction<S>, "onclick">
  readonly #messages: string[]

  @({
    #id:: string
    #fade:: boolean = true
    #scrollable:: boolean = true
    #centered:: boolean = false
    #size?:: ModalSize
    #fullscreen?:: ModalFullscreen
    #title
    #status // see status.js
    #closable = true
    action = {}
    close = {}
    #messages = []
    #value
  })
    #action = if action then {...ModalDialog.DEFAULT_ACTION, ...action} else null
    #close = if close then {...ModalDialog.DEFAULT_CLOSE, ...close} else null
    #result = undefined

    #initNode()

  // モーダルウィンドウのノードを作成し、初期化する。
  #initNode()
    #modalNode = document.createElement("div")
    #modalNode.id = `${#id}-modal`
    #modalNode.classList.add("modal")
    #modalNode.classList.add("fade") if #fade
    #modalNode.setAttribute("tabindex", -1)
    #modalNode.setAttribute("aria-hidden", "true")

    modalDialogNode := document.createElement("div")
    modalDialogNode.id = `${#id}-modal-dialog`
    modalDialogNode.classList.add("modal-dialog")

    #modalNode.appendChild(modalDialogNode)
    document.body.appendChild(#modalNode)

    #modal = new Modal(#modalNode)

    app {
      init: #appInit()
      view: #modalView
      node: modalDialogNode
      subscriptions: (state) => [
        ModalDialog.onMessage #modalNode, #receiveModalMessage
        ModalDialog.onShown #modalNode, (state) -> [{...state, shown: true}, focus(state.focus)]
        ModalDialog.onHidden #modalNode, (state) -> {...state, shown: false}
      ]
    }

  // Views

  #modalView = ({title, status, closable, action, ...props}) =>
    modalDialog {
      #id
      #scrollable
      #centered
      #size
      #fullscreen
      title
      status
      closable
      action
    }, #modalBody {...props}

  #modalBody({messages})
    html.p {}, text message for each message of messages ?? []

  // fire event
  fireModalMessage(props)
    event = new CustomEvent(ModalDialog.MESSAGE_EVENT, {detail: props})
    #modalNode.dispatchEvent(event)

  // Actions
  receiveModalMessage(state, props)
    {...state, ...props}

  // show
  showPromise(state = {})
    state := #initState(state)
    #fireModalMessage(state)
    #result = undefined
    waitModalClose = #waitModalClosePromise()
    // hack modal config
    // https://github.com/twbs/bootstrap/issues/35664
    if state.closable
      #modal._config.backdrop = true
      #modal._config.keyboard = true
    else
      #modal._config.backdrop = "static"
      #modal._config.keyboard = false
    #modal.show()

    await waitModalClose

    return #result
  
  hide()
    #modal.hide()

  waitModalClosePromise()
    new Promise (resolve, reject) =>
      #modalNode.addEventListener "hidden.bs.modal", ->
        resolve()
      , {once: true}

  appInit = => #initState

  modalAction = (state) =>
    #result = state.value
    [state, #hideModal]

  hideModal = (_dispatch) => #modal.hide()

  initState = (state) => {
    title: #title
    status: #status
    closable: #closable
    action: if #action then {...#action, onclick: #modalAction} else null
    close: #close
    messages: #messages
    value: #value
    shwon: false
    focus: `${#id}-modal-close-button`
    ...state
  }

  // Static Methods

  // Create Subscription
  @onMessage(node: HtmlElement, action): Subscription
    [ModalDialog.listenMessage, {node, action}]
  @onShown(node, action)
    [ModalDialog.listenShown, {node, action}]
  @onHidden(node, action)
    [ModalDialog.listenHidden, {node, action}]

  // SubscriberFn
  @listenMessage<S>(dispatch: Dispatch<S>, {node:: HtmlElement, action:: Action<S>}): Unsubscribe
    func := (e) -> dispatch(action, e.detail)
    node.addEventListener(ModalDialog.MESSAGE_EVENT, func)
    -> node.removeEventListener(ModalDialog.MESSAGE_EVENT, func)
  @listenShown(dispatch, {node, action})
    func := -> dispatch(action)
    node.addEventListener("shown.bs.modal", func)
    -> node.removeEventListener("shown.bs.modal", func)
  @listenHidden(dispatch, {node, action})
    func := -> dispatch(action)
    node.addEventListener("hidden.bs.modal", func)
    -> node.removeEventListener("hidden.bs.modal", func)
