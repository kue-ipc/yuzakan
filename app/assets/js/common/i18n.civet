// I18n
// global varibale: i18nTranslations
// event: "i18n.translations"

export interface Translations
  [key: string]: string | Translations

declare global
  var i18nTranslations: Record<string, Translations>
  interface WindowEventMap
    "i18n.translations.load": CustomEvent<string>

globalThis.i18nTranslations ?= {}

DEFAULT_LOCALE := "ja"
I18N_TRANSLATIONS_LOAD := "i18n.translations.load"

// TODO: 現在はデフォルトロケール固定
export t := (key: string, opts: Record<string, string> = {}): string ->
  current: string? | Translations .= getTranslations()
  for each str of key.split(".")
    break unless current?
    break if current <? "string"
    
    current = current[str]

  unless current <? "string"
    console.warn "no translaiton fond: %s", key
    return key

  for own name, replace in opts
    current = current.replaceAll(`%{${name}}`, replace)
  
  current

export getTranslations := (locale: string = DEFAULT_LOCALE): Translations? ->
  globalThis.i18nTranslations[locale]

export loadTranslations := (translations: Translations, locale?: string):
  Translations ->
  if locale
    updateTranslations(globalThis.i18nTranslations, {[locale]: translations})
  else
    updateTranslations(globalThis.i18nTranslations, translations)
  window.dispatchEvent(new CustomEvent(I18N_TRANSLATIONS_LOAD))
  globalThis.i18nTranslations

export waitLoadTranslations := (locale: string = DEFAULT_LOCALE):
    Promise<Translations> ->
  new Promise<Translations> (resolve, _reject) ->
    currentTranslations := getTranslations(locale)
    return resolve(currentTranslations) if currentTranslations?

    checkTranslation := (_e: CustomEvent) ->
      newTranslations := getTranslations(locale)
      return unless newTranslations?

      window.removeEventListener I18N_TRANSLATIONS_LOAD, checkTranslation
      resolve(newTranslations)
    
    window.addEventListener I18N_TRANSLATIONS_LOAD, checkTranslation
    console.debug "wait load translations"

updateTranslations := (translaitons: Translations, ...others: Translations[]):
    Translations ->
  for each other of others
    for own key, value in other
      if value <? "string"
        translaitons[key] = value
      else if !Object.hasOwn(translaitons, key) or translaitons[key] <? "string"
        translaitons[key] = cloneTranslations(value)
      else
        updateTranslations(translaitons[key], value)
  translaitons

cloneTranslations := (translations: Translations): Translations ->
  clone: Translations := Object.assign({}, translations)
  for own key, value in clone when value !<? "string"
    clone[key] = cloneTranslations(value)
  clone
