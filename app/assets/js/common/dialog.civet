/**
 * Dialog
 * ダイアログを表示するクラス
 */

{app, text, type Action, type Dispatch, type ElementVNode, type Dispatchable, type Effecter, type VNode, type Unsubscribe, type Subscription} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom
{delay} from @hyperapp/time

{modalDialog, type ModalButton, type ModalSize, type ModalFullscreen} from ~/app/component/modal.civet
Status from ~/common/status.civet
{getBootstrap, type Modal} from ~/common/bs.civet

export interface DialogState
  title: string
  status?: string | Status
  closable?: boolean
  action?: ModalButton
  close?: ModalButton
  effecter?: Effecter<DialogState>
  focus?: "action" | "close"
  messages: string | string[]
  shown: boolean

export DialogProps ::= Partial<Omit<DialogState, "shown">>
 
export default class Dialog
  readonly #id: string
  readonly #fade: boolean
  readonly #scrollable: boolean
  readonly #centered: boolean
  readonly #size: ModalSize
  readonly #fullscreen: ModalFullscreen

  readonly #modalNode: HTMLElement
  readonly #modal: Modal
  readonly #dispatch: Dispatch<DialogState>

  @({
    #id:: string
    #fade:: boolean = false
    #scrollable:: boolean = false
    #centered:: boolean = false
    #size?:: ModalSize = "md"
    #fullscreen?:: ModalFullscreen = false
    title:: string = ""
    status?:: string | Status
    closable?:: boolean
    action?:: ModalButton
    close?:: ModalButton
    effecter?:: Effecter<DialogState>
    focus?:: "action" | "close"
    messages:: string | string[] = ""
  })

    #modalNode = document.createElement("div")
    #modalNode.id = `${#id}-modal`
    #modalNode.classList.add("modal")
    #modalNode.classList.add("fade") if #fade
    #modalNode.setAttribute("tabindex", "-1")
    #modalNode.setAttribute("aria-hidden", "true")

    modalDialogNode := document.createElement("div")
    modalDialogNode.id = `${#id}-modal-dialog`
    modalDialogNode.classList.add("modal-dialog")

    #modalNode.appendChild(modalDialogNode)
    document.body.appendChild(#modalNode)

    init := {}
      title
      status
      closable
      action
      close
      effecter
      focus
      messages
      shown: false
    view := #modalView
    node := modalDialogNode
    subscriptions := (state: DialogState) => []
      #onHidden(#afterHidden)
      #onShow(#afterShow)
      #onShown(#afterShown)

    #dispatch = app<DialogState>({init, view, node, subscriptions})
    #modal = new (getBootstrap().Modal)(#modalNode)

  // Actions

  #afterHidden(state: DialogState): Dispatchable<DialogState>
    {...state, shown: false}

  #afterShow(state: DialogState): Dispatchable<DialogState>
    {...state, shown: true}

  #afterShown = (state: DialogState): Dispatchable<DialogState> =>
    if state.focus
      [state, focus(`${#id}-modal-${state.focus}-button`)]
    else
      state
 
  // Subscribers

  #listenModalEvent = (type: string) =>
    (dispatch: Dispatch<DialogState>, action: Action<DialogState, void>): Unsubscribe =>
      name := `${type}.bs.modal`
      func := -> dispatch(action)
      #modalNode.addEventListener(name, func)
      => #modalNode.removeEventListener(name, func)


  #onModalEvent = (type: string) =>
    (action: Action<DialogState, void>): Subscription<DialogState, Action<DialogState, void>> =>
      [#listenModalEvent(type), action]

  #onHide = #onModalEvent("hide")
  #onHidden = #onModalEvent("hidden")
  #onHidePrevented = #onModalEvent("hidePrevented")
  #onShow = #onModalEvent("show")
  #onShown = #onModalEvent("shown")
  
  // Views

  #modalView = ({effecter, focus, messages, ...props}: DialogState): ElementVNode<DialogState> =>
    // do not use focus prop in view
    modalDialog<DialogState> {
      #id
      #scrollable
      #centered
      #size
      #fullscreen
      onclick: ((state) -> [state, effecter]) if effecter?
      ...props
    }, #modalBody {messages}

  #modalBody({messages:: string | string[]}): ElementVNode<DialogState>[]
    messages = [messages] if messages <? "string"
    html.p<DialogState> {}, text message for each message of messages

  // Actions

  #updateState = (state: DialogState, props: DialogProps): Dispatchable<DialogState> =>
    newState := {...state, ...props}
    // HACK: sett private properties of modal config
    //     <https://github.com/twbs/bootstrap/issues/35664>
    if newState.closable
      (#modal as any)._config.backdrop = true
      (#modal as any)._config.keyboard = true
    else
      (#modal as any)._config.backdrop = "static"
      (#modal as any)._config.keyboard = false

    console.debug "update modal state", newState
    if newState.shown and newState.focus?
      console.debug "focus on modal button", newState.focus
      []
        newState
        delay 1, (delayState) => [delayState, focus<DialogState>(`${#id}-modal-${state.focus}-button`)]
    else
      newState

  // pulbic methods

  update(props: DialogProps): void
    #dispatch(#updateState, props)

  show(props?: DialogProps): void
    @update(props) if props?
    console.debug "show modal", #id
    #modal.show()

  hide(): void
    console.debug "hide modal", #id
    #modal.hide()

  waitHidden(): Promise<void>
    new Promise<void> (resolve, _reject) =>
      #modalNode.addEventListener "hidden.bs.modal", ->
        resolve()
      , {once: true}

  showPromise(props?: Partial<DialogState>): Promise<void>
    wait := @waitHidden()
    @show(props)
    wait
