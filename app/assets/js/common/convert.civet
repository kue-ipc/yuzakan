// convert from/to primitive vaule and Object, Array, Map, Set, DateTime, ...etc

{DateTime} from luxon

type BooleanString
  | "1"
  | "0"
  | "t"
  | "f"
  | "true"
  | "false"
  | "y"
  | "n"
  | "yes"
  | "no"
  | "on"
  | "off"

type Type
  | "string"
  | "text"
  | "boolean"
  | "integer"
  | "float"
  | "datetime"
  | "date"
  | "time"
  | "list"
  | "map"
  | "set"
  | "object"
  | "any"

TRUE_STRINGS: Set<BooleanString> := new Set([
  "1"
  "t"
  "true"
  "y"
  "yes"
  "on"
])

FALSE_STRINGS: Set<BooleanString> := new Set([
  "0"
  "f"
  "false"
  "n"
  "no"
  "off"
])

export TRUE_STR: BooleanString := "1"
export FALSE_STR: BooleanString := "0"

// convert to the specified type
export convertToType := (val: any, type: Type = "string") ->
  return val unless val?

  switch type
    when "string", "text"
      toString(val)
    when "boolean"
      toBoolean(val)
    when "integer"
      toInteger(val)
    when "float"
      toFloat(val)
    when "datetime"
      toDateTime(val)
    when "date"
      toDate(val)
    when "time"
      toTime(val)
    when "list"
      toList(val)
    when "map"
      toMap(val)
    when "set"
      toSet(val)
    when "object"
      toObject(val)
    when "any"
      val
    else
      console.warn `cannot convert to the unknown type: ${type}`
      undefined

export toString := (val) -> String(val)

export toBoolean := (val) ->
  if typeof val is "string"
    lowerStr = val.toLowerCase()
    if TRUE_STRINGS.has(lowerStr)
      return true
    else if FALSE_STRINGS.has(lowerStr)
      return false

  Boolean(val)

export toInteger := (val) -> Math.floor(Number(val))

export toFloat := (val) -> Number(val)

export toDateTime := (val) ->
  dateTime = switch typeof val
    when "number"
      DateTime.fromSeconds(val)
    when "bigint"
      DateTime.fromSeconds(Number(val))
    when "string"
      if val
        DateTime.fromISO(val)
      else
        null
    when "object"
      if val instanceof Date
        DateTime.fromJSDate(val)
      else if val instanceof DateTime
        val
      else
        console.warn "no datetime object: %s", val
        DateTime.fromJSDate(Date(val))
    else
      console.warn "no datetime object: %s", val
      DateTime.fromJSDate(Date(val))
  dateTime?.toLocal()

export toDate := (val) -> toDateTime(val)?.toISODate()

export toTime := (val) -> toDateTime(val)?.toISOTime({includeOffset: false})

export toList := (val) ->
  val = JSON.parse(val) if typeof val is "string"
  return val if val instanceof Array

  if val[Symbol.iterator]?
    [...val]
  else if val.length?
    (v for each v of val)
  else if typeof val is "object"
    Object.entries(val)
  else
    console.warn "no list object: %s", val
    []

export toMap := (val) ->
  return val if val instanceof Map

  new Map(toList(val).map((v) ->
    if typeof v is "string"
      [v, true]
    else
      toList(v)
    )
  )

export toSet := (val) ->
  return val if val instanceof Set

  new Set(toList(val))

export toObject := (val) ->
  if typeof val is "string"
    JSON.parse(val)
  else if val[Symbol.iterator]?
    Object.fromEntries(val)
  else
    Object(val)

// object -> other

export objToJson := (obj, space = undefined) ->
  JSON.stringify obj, jsonReplacer, space

// bigint, Map, Set
jsonReplacer := (key, value) ->
  switch typeof value
    when "bigint"
      // 精度落ち
      Number(value)
    when "object"
      if value instanceof Map
        Object.fromEntries([...value])
      else if value instanceof Set
        [...value]
      else
        value
    else
      value

export objToRecord := (obj) ->
  toObject(objToParams(obj))

export objToParams := (obj, parents = []) ->
  obj = Object.fromEntries(obj) if obj instanceof Map
  params = []
  for own key, value in obj
    if typeof value is "object"
      if value instanceof Map
        params.push(...objToParams(toObject(value), [...parents, key]))
      else if value instanceof Set
        params.push(...objToParams(toList(value), [...parents, key]))
      else if value instanceof DateTime
        params.push([generateParamName(...parents, key), value.toString()])
      else
        params.push(...objToParams(value, [...parents, key]))
    else
      params.push([generateParamName(...parents, key), value])
  params

export objToUrlencoded := (obj) ->
  objToUrlencodedParams(obj).join("&")

export objToUrlencodedParams := (obj) ->
  for each [key, value] of objToParams(obj) when value?
    `${encodeURIComponent(key)}=${valueToUrlencoded(value)}`

// JavaScriptの値をUrlencodedの文字列に落とし込む前に変換する
// true, fales -> 1, 0
valueToUrlencoded := (value) ->
  if !value?
    ""
  else if value is true
    "1"
  else if value is false
    "0"
  else if value instanceof Date
    encodeURIComponent(String(toDateTime(value)))
  else
    encodeURIComponent(String(value))

// other -> object

export recordToObj := (record) ->
  root := {}
  for key, value in record
    keyList := parseParamName(key)
    obj .= root
    while subKey = keyList.shift()
      if keyList.length is 0
        obj[subKey] = value if value? && value is not ""
      else
        if keyList[0] is ""
          unless keyList.length is 1
            console.error "empty key must be last: %s", key
            throw new Error("ilegal subkey: empty key must be last")
          obj[subKey] is (v for each v of Array(value) when v? && v is not "")
        else if /^\d+$/.test(keyList[0])
          obj[subKey] ?= []
          unless obj[subKey] instanceof Array
            console.warn "mix numbers and words on object: %s", key
        else
          obj[subKey] ?= {}
          unless typeof obj[subKey] is "object"
            console.error "parent is not object: %s", key
            throw new Error("ilegal subkey: parent is not object")
          if obj[subKey] instanceof Array
            console.warn "mix numbers and words on array: %s", key
        obj = obj[subKey]
    
  root

// param name

// abc[def][ghi] -> abc def ghi
export parseParamName = (str: string): string[] ->
  list: string[] := []
  list.push str.match(/^([^\[]*)/)[0]
  list.push ...(r[1] for r of str.matchAll(/\[([^\]]*)\]/g))
  list

// abc, def, hij -> abc[def][hij]
export generateParamName := (...list: string[]): string ->
  (list[0] ?? "") + (`[${str}]` for each str of list[1..]).join("")

