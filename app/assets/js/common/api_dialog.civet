/**
 * ApiDialog class
 * データをJSONとしてAPIにfetchし、受け取ったJSONをメッセージとして表示する。
 * 完了するまではmodalを使用して、操作できないようにする。
 */ 

{app, text, type Subscription, type Action} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom

{modalDialog} from ~/app/component/modal.civet
{normalizeURL} from ~/helpers/url_helper.civet
Status from ~/common/status.civet
ResponseMessage from ~/common/response_message.civet
{getBootstrap, type BsBootstrap, type Modal} from ~/common/bs.civet
{t} from ~/common/i18n.civet

{fetchAPI, type ResponseData} from ~api/fetch_api.civet

Dialog, {type DialogState} from ~/common/dialog.civet

// declare global
//   interface HTMLElementEventMap
//     "apidialog.message": CustomEvent<string>

// interface ModalState
//   status: string | Status
//   messages: string | string[]
//   link?: URL??
//   closable?: boolean
//   reload?: boolean

ResponseMessageCodeMap ::= Map<number, ResponseMessage>

ResponseMessageCodeListKey ::= number
ResponseMessageCodeListValue ::=
  ResponseMessage | ConstructorParameters<typeof ResponseMessage>.0

ResponseMessageCodeList ::=
  Map<ResponseMessageCodeListKey, ResponseMessageCodeListValue> |
  [ResponseMessageCodeListKey, ResponseMessageCodeListValue][]

export default class APIDialog
  @mergeMessageCodeMap := (base: ResponseMessageCodeMap,
    other: ResponseMessageCodeList): ResponseMessageCodeMap->
    for [key, value] of other
      responseMessage :=
        if value <? ResponseMessage
          value
        else
          new ResponseMessage(value) 
      base.set(key, responseMessage)
    base

  @MESSAGE_EVENT := "apidialog.message"
  @DEFAULT_RESPONSE_MESSAGE_CODE_MAP: ResponseMessageCodeMap := do
    list: ResponseMessageCodeList := [
      [0, {status: "error", message: "error", reload: true}]
      [200, {status: "success", message: "ok"}]
      [201, {status: "success", message: "created"}]
      [202, {status: "success", message: "accepted"}]
      [204, {status: "success", message: "no_content"}]
      [400, {status: "error", message: "bad_request"}]
      [401, {status: "error", message: "unauthorized", reload: true}]
      [403, {status: "error", message: "forbidden", reload: true}]
      [404, {status: "error", message: "not_found", reload: true}]
      [422, {status: "failure", message: "unprocessable_content"}]
      [500, {status: "fatal", message: "internal_server_error", reload: true}]
    ]
    map: ResponseMessageCodeMap := new Map
    @mergeMessageCodeMap(map, list)

  @UNKNOWN_RESPONSE_MESSAGE: ResponseMessage :=
    new ResponseMessage({status: "unknown", message: "unknown", reload: true})

  readonly #id: string
  readonly #name: string
  readonly #method: string
  readonly #path: string
  #responseMessageCodeMap: Map<number, ResponseMessage> :=
    new Map(APIDialog.DEFAULT_RESPONSE_MESSAGE_CODE_MAP)

  // readonly #modalNode: HTMLDivElement
  // readonly #modal: Modal

  readonly #dialog: Dialog

  @({
    #id:: string
    #name:: string
    #method:: string = "GET"
    #path:: string
    responseMessageCodeList?:: ResponseMessageCodeList
  })
    if responseMessageCodeList?
      APIDialog.mergeMessageCodeMap(#responseMessageCodeMap,
        responseMessageCodeList)
  
    #dialog = new Dialog {
      id: #id
      centered: true
      title: t(#name)
    }

    // modalDialogNode := document.createElement("div")
    // modalDialogNode.id = `${#id}-modal-dialog`
    // modalDialogNode.classList.add("modal-dialog")

    // #modalNode = document.createElement("div")
    // #modalNode.id = `${#id}-modal`
    // #modalNode.classList.add("modal")
    // #modalNode.setAttribute("tabindex", "-1")
    // #modalNode.setAttribute("aria-hidden", "true")
    // #modalNode.appendChild(modalDialogNode)

    // document.body.appendChild(#modalNode)

    // #modal = new (getBootstrap().Modal)(#modalNode)

    // init: ModalState := {}
    //   status: "unknown"
    //   messages: "n/a"
    //   closable: true
    //   link: null
    //   reload: false
    // view := #modalView
    // node := modalDialogNode
    // subscriptions := (state: ModalState) =>[
    //   #messageSub(#messageAction, {node: #modalNode})
    // ]

    // app {init, view, node, subscriptions}

  // Hyperapp Views

  // #modalView := ({status, messages, closable, link, reload}: ModalState) =>
  //   status = Status.get(status) if status <? "string"
  //   modalDialog {
  //     id: #id,
  //     centered: true
  //     title: `${t(#name)} ${status.label}`
  //     status
  //     closable
  //     action: if link?
  //       {
  //         label: t("ui.buttons.move_immediately")
  //         color: "primary"
  //         onclick: (state) -> [state, [-> location.href = link.href]]
  //       }
  //     else if reload
  //       {
  //         label: t("ui.buttons.reload_page")
  //         color: "danger"
  //         onclick: (state) -> [state, [-> location.reload()]]
  //       }
  //   }, #messageList {messages}

  // #messageList({messages:: string | string[]})
  //   messages = [messages] if messages <? "string"
  //   html.div {}, messages.map (msg) ->
  //     html.div {},
  //       text msg

  // Hyperapp Action

  // #messageAction: Action<ModalState> = (state: ModalState, params) =>
  //   newState := {...state, ...params}
  //   if newState.closable
  //     [newState, focus(`${#id}-modal-close-button`)]
  //   else
  //     newState

  // Hyperapp create Subscription 

  // #messageSub = (action: Action<ModalState>, {node:: HTMLElement}): Subscription<ModalState> =>
  //   [#messageRunner, {action, node}]

  // Hyperapp Subscriber

  // #messageRunner: Subscription<ModalState>.0 = (dispatch, {action:: Action<ModalState>, node:: HTMLElement}) ->
  //   func := (e: CustomEvent) -> dispatch(action, e.detail)
  //   node.addEventListener(APIDialog.MESSAGE_EVENT, func)
  //   -> node.removeEventListener(APIDialog.MESSAGE_EVENT, func)

  // modal control

  // #modalMessage(state: ModalState): void
  //   // HACK: sett private properties of modal config
  //   //     <https://github.com/twbs/bootstrap/issues/35664>
  //   if state.closable
  //     (#modal as any)._config.backdrop = true
  //     (#modal as any)._config.keyboard = true
  //   else
  //     (#modal as any)._config.backdrop = "static"
  //     (#modal as any)._config.keyboard = false

  //   event := new CustomEvent(APIDialog.MESSAGE_EVENT, {detail: state})
  //   #modalNode.dispatchEvent(event)

  // #waitModalClose = =>
  //   new Promise<void> (resolve, reject) =>
  //     #modalNode.addEventListener "hidden.bs.modal", -> resolve(), once: true

  // public methods

  submitPromise({params?:: {[key: string]: string}, data?:: any}): ResponseData
    runningState: Partial<DialogState> := {}
      status: "running"
      closable: false
      messages: t("ui.messages.running", {name: t(#name)})
    wait := #dialog.showPromise(runningState)

    // #modalMessage(runningMessageState)
    // #modal.show()

    path .= #path
    for name, replace in params
      path = path.replaceAll(`%{name}`, replace)

    response: ResponseData := try
      await fetchAPI(path, {data, #method})
    catch error
      console.error error
      {
        ok: false
        status: {code: 0, message: "fetch error"}
        location: normalizeURL(path)
        flash: {error: t("ui.messages.fetch_error")}
      }

    responseMessage := #responseMessageCodeMap.get(response.status.code) ?? APIDialog.UNKNOWN_RESPONSE_MESSAGE

    resultState: {messages: string[]} & Omit<Partial<DialogState>, "messages"> := {}
      status: responseMessage.status
      closable: true
      messages: [
        responseMessage.message
        ...Object.values(response.flash ?? {})
      ].filter & <? "string"

    redirectLink := responseMessage.redirectTo

    if redirectLink?
      if responseMessage.reloadTime > 0
        resultState.messages.push(t("ui.messages.redirect_after", {sec: responseMessage.reloadTime.toString()}))
      else
        resultState.messages.push(t("ui.messages.redirect_immediately"))
      resultState.closable = false
      resultState.action = {label: t("ui.buttons.move_immediately"), color: "primary"}
      resultState.effecter = -> location.href = redirectLink.href;
    else if responseMessage?.reload
      resultState.closable = false
      resultState.action = {label: t("ui.buttons.reload_page"), color: "danger"}
      resultState.effecter = -> location.reload()


    // resultState: Partial<DialogState> := {}
    //   status
    //   messages
    //   closable
    //   action
    //   effecter

    #dialog.update(resultState)

    if redirectLink?
      setTimeout ->
        location.href = redirectLink.href
      , responseMessage.reloadTime * 1000
    if responseMessage.autoCloseTime > 0
      setTimeout =>
        #dialog.hide()
      , responseMessage.autoCloseTime * 1000

    await wait

    response
