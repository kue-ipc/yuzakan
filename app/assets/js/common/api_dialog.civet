/**
 * ApiDialog class
 * データをJSONとしてAPIにfetchし、受け取ったJSONをメッセージとして表示する。
 * 完了するまではmodalを使用して、操作できないようにする。
 */ 

{uniq} from ramda

{normalizeURL} from ~/helpers/url_helper.civet

{t} from ~/common/i18n.civet
ResponseMessage from ~/common/response_message.civet
Dialog, {type DialogState} from ~/common/dialog.civet

{fetchAPI, type ResponseData} from ~api/fetch_api.civet

ResponseMessageCodeMap ::= Map<number, ResponseMessage>

ResponseMessageCodeListKey ::= number

ResponseMessageCodeListValue ::=
  ResponseMessage | ConstructorParameters<typeof ResponseMessage>.0

ResponseMessageCodeList ::=
  Map<ResponseMessageCodeListKey, ResponseMessageCodeListValue> |
  [ResponseMessageCodeListKey, ResponseMessageCodeListValue][]

export default class APIDialog
  @mergeMessageCodeMap := (base: ResponseMessageCodeMap,
    other: ResponseMessageCodeList): ResponseMessageCodeMap->
    for [key, value] of other
      responseMessage :=
        if value <? ResponseMessage
          value
        else
          new ResponseMessage(value) 
      base.set(key, responseMessage)
    base

  @MESSAGE_EVENT := "apidialog.message"
  @DEFAULT_RESPONSE_MESSAGE_CODE_MAP: ResponseMessageCodeMap := do
    list: ResponseMessageCodeList := [
      [0, {status: "error", message: "error", reload: true}]
      [200, {status: "success", message: "ok"}]
      [201, {status: "success", message: "created"}]
      [202, {status: "success", message: "accepted"}]
      [204, {status: "success", message: "no_content"}]
      [400, {status: "error", message: "bad_request"}]
      [401, {status: "error", message: "unauthorized", reload: true}]
      [403, {status: "error", message: "forbidden", reload: true}]
      [404, {status: "error", message: "not_found", reload: true}]
      [422, {status: "failure", message: "unprocessable_content"}]
      [500, {status: "fatal", message: "internal_server_error", reload: true}]
    ]
    map: ResponseMessageCodeMap := new Map
    @mergeMessageCodeMap(map, list)

  @UNKNOWN_RESPONSE_MESSAGE: ResponseMessage :=
    new ResponseMessage({status: "unknown", message: "unknown", reload: true})

  readonly #id: string
  readonly #name: string
  readonly #method: string
  readonly #path: string
  #responseMessageCodeMap: Map<number, ResponseMessage> :=
    new Map(APIDialog.DEFAULT_RESPONSE_MESSAGE_CODE_MAP)

  readonly #dialog: Dialog

  @({
    #id:: string
    #name:: string
    #method:: string = "GET"
    #path:: string
    responseMessageCodeList?:: ResponseMessageCodeList
  })
    if responseMessageCodeList?
      APIDialog.mergeMessageCodeMap(#responseMessageCodeMap,
        responseMessageCodeList)
  
    #dialog = new Dialog {}
      id: #id
      centered: true
      title: t(#name)

  // public methods

  submitPromise({params?:: {[key: string]: string}, data?:: any}): ResponseData
    runningState: Partial<DialogState> := {}
      status: "running"
      closable: false
      messages: t("ui.messages.running", {name: t(#name)})
    wait := #dialog.showPromise(runningState)

    path .= #path
    for name, replace in params
      path = path.replaceAll(`%{name}`, replace)

    response: ResponseData := try
      await fetchAPI(path, {data, #method})
    catch error
      console.error error
      {
        ok: false
        status: {code: 0, message: "fetch error"}
        location: normalizeURL(path)
        flash: {error: t("ui.messages.fetch_error")}
      }

    responseMessage := #responseMessageCodeMap.get(response.status.code) ?? APIDialog.UNKNOWN_RESPONSE_MESSAGE

    resultState: {messages: string[]} & Omit<Partial<DialogState>, "messages"> := {}
      status: responseMessage.status
      closable: true
      focus: "close"
      messages: uniq([
        responseMessage.message
        ...Object.values(response.flash ?? {})
      ]).filter & <? "string"

    redirectLink := responseMessage.redirectTo

    if redirectLink?
      if responseMessage.reloadTime > 0
        resultState.messages.push(t("ui.messages.redirect_after", {sec: responseMessage.reloadTime.toString()}))
      else
        resultState.messages.push(t("ui.messages.redirect_immediately"))
      resultState.closable = false
      resultState.focus = undefined
      resultState.action = {label: t("ui.buttons.move_immediately"), color: "primary"}
      resultState.effecter = -> location.href = redirectLink.href;
    else if responseMessage?.reload
      resultState.closable = false
      resultState.focus = undefined
      resultState.action = {label: t("ui.buttons.reload_page"), color: "danger"}
      resultState.effecter = -> location.reload()

    #dialog.update(resultState)

    if redirectLink?
      setTimeout ->
        location.href = redirectLink.href
      , responseMessage.reloadTime * 1000
    if responseMessage.autoCloseTime > 0
      setTimeout =>
        #dialog.hide()
      , responseMessage.autoCloseTime * 1000

    await wait

    response
