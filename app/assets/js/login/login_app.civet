// Login App

{app, text, type Dispatch, type Dispatchable} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom
{delay} from @hyperapp/time
APIDialog from ~/api_dialog.civet
bsIcon from ~/app/bs_icon.civet
csrf from ~/csrf.civet
{t} from ~/common/i18n.civet

interface LoginInputState
  value: string
  error: string
  disabled: boolean

interface LoginState
  username: LoginInputState
  password: LoginInputState
  submittable: boolean

interface LoginPayload
  username: string
  password: string

LOGIN_ID := "login"
LOGIN_USERNAME_ID := "login-username"
LOGIN_PASSWORD_ID := "login-password"

apiDialog := new APIDialog {
  id: "login"
  name: "actions.login"
  method: "POST"
  path: "session"
  responseMessageCodeList: [
    [201, {status: "success", message: "login_succeeded", redirectTo: "/"}]
    [400, {status: "failure", message: "login_failed"}]
    [422, {status: "failure", message: "login_failed"}]
  ]
}

// Actions

Login := ({username, password, submittable}: LoginState, _event: Event) ->
  [{
    username: {...username, disabled: true}
    password: {...password, disabled: true}
    submittable: false
  }, login({username: username.value, password: password.value})]

EnterToSubmitOrNextInput := (state: LoginState, event: KeyboardEvent) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if state.submittable
      Login
    else if event.target.id is LOGIN_USERNAME_ID
      [state, focus(LOGIN_PASSWORD_ID)]
    else
      [state, focus(LOGIN_USERNAME_ID)]
  else
    state

UpdateUsername := (state: LoginState, event: InputEvent): LoginState ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.password.value)
  {
    ...state
    username: {value, error: "", disabled: false}
    submittable
  }

UpdatePassword := (state: LoginState, event: InputEvent): LoginState ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.username.value)
  {
    ...state
    password: {value, error: "", disabled: false}
    submittable
  }

PreventSubmit := (state: LoginState, event: SubmitEvent): LoginState ->
  event.preventDefault()
  state

// Effecters

runLogin := (dispatch: Dispatch<LoginState>, payload: LoginPayload) ->
  response := await apiDialog.submitPromise {data: {...csrf(), ...payload}}
  param_errors: {username: string, password: string} :=
    {username: "", password: ""}
  for each error of response?.data?.errors
    if error <? Object
      param_errors.username += error.username if error.username?
      param_errors.password += error.password if error.password?

  dispatch ({username, password, submittable}) ->
    focusTarget :=
      if param_errors.username
        LOGIN_USERNAME_ID
      else
        LOGIN_PASSWORD_ID
    [
      {
        username: {username.value, error: param_errors.username, disabled: false}
        password: {value: "", error: param_errors.password, disabled: false}
        submittable
      }
      focus(focusTarget)
    ]

// Effect Generators

login := (payload: LoginPayload) ->
  [runLogin, payload]

// Views

loginTitle := () ->
  html.h3 {class: "login-title text-center mb-2"}, text t("actions.login")

loginUsernameInput := ({value, error, disabled}: LoginInputState) ->
  html.div {class: "mb-3"}, [
    html.input {
      id: LOGIN_USERNAME_ID
      class: ["form-control", {is-invalid: !!error}]
      type: "text"
      autocomplete: "username"
      required: true
      placeholder: t("view.labels.username")
      disabled
      value
      oninput: UpdateUsername
      onkeypress: EnterToSubmitOrNextInput
    }
    html.div {class: "invalid-feedback"},
      text error
  ]

loginPasswordInput := ({value, error, disabled}: LoginInputState) ->
  html.div {class: "mb-3"}, [
    html.input {
      id: LOGIN_PASSWORD_ID
      class: ["form-control", {is-invalid: !!error}]
      type: "password"
      autocomplete: "current-password"
      required: true
      placeholder: t("view.labels.password")
      disabled
      value
      oninput: UpdatePassword
      onkeypress: EnterToSubmitOrNextInput
    }
    html.div {class: "invalid-feedback"},
      text error
  ]

loginSubmitButton := ({submittable:: boolean}) ->
  html.div {class: "d-grid gap-auto"},
    html.button {
      class: "btn btn-primary d-flex align-items-center justify-content-center"
      disabled: !submittable
      onclick: Login
    }, [
      bsIcon {name: "box-arrow-in-right", class: "flex-shrink-0 me-1"}
      text t("actions.login")
    ]

// App

export default loginApp := ->
  node := document.getElementById(LOGIN_ID)

  if node?
    classList := Array.from(node.classList)

    init: Dispatchable<LoginState, any>  := [
      {
        username: {value: "", error: "", disabled: false}
        password: {value: "", error: "", disabled: false}
        submittable: false
      }
      delay 10, (state: LoginState) -> [state, focus(LOGIN_USERNAME_ID)]
    ]

    view := ({username, password, submittable}: LoginState) ->
      html.form {id: "login", class: classList, onsubmit: PreventSubmit}, [
        loginTitle()
        loginUsernameInput(username)
        loginPasswordInput(password)
        loginSubmitButton({submittable})
      ]

    app<LoginState> {init, view, node}
