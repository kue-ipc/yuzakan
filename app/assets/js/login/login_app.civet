// Login app

{app, text, type Action, type Dispatchable, type Effect, type Effecter, type VNode} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom
{isNotEmpty} from ramda

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
Dialog from ~/common/dialog.civet
{flashValidation, type Validation} from ~/common/flash.civet

* as form from ~/app/form.civet
icon from ~/app/icon.civet
{runAlertFlash} from ~/app/alert.civet

{type ResponseData} from ~api/fetch_api.civet
{createCreateAuth, type AuthProps, type AuthState} from ~api/actions/auth.civet

interface LoginState < AuthState
  disabled: boolean
  dialog: Dialog

interface LoginInputState < Validation
  value: string
  disabled: boolean

LOGIN_ID := "login"
LOGIN_USERNAME_ID := "login-username"
LOGIN_PASSWORD_ID := "login-password"

// fuctions

submittable := (state: LoginState): boolean ->
  not state.disabled and [state.auth.username, state.auth.password].every(isNotEmpty)

// Views

loginTitle := (): VNode<LoginState> ->
  html.h3 {class: "login-title text-center mb-2"}, text t("actions.login")

loginUsernameInput := ({value, disabled, valid, invalid}: LoginInputState): VNode<LoginState> ->
  form.inputFloating {}
    id: LOGIN_USERNAME_ID
    label: t("ui.labels.username")
    type: "text"
    autocomplete: "username"
    required: true
    disabled
    value
    oninput: UpdateUsername
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid

loginPasswordInput := ({value, disabled, valid, invalid}: LoginInputState): VNode<LoginState> ->
  form.inputFloating {}
    id: LOGIN_PASSWORD_ID
    label: t("ui.labels.password")
    type: "password"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePassword
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid

loginSubmitButton := ({disabled:: boolean}): VNode<LoginState> ->
  html.div {class: "d-grid gap-auto"},
    html.button {
      class: "btn btn-primary d-flex align-items-center justify-content-center"
      disabled
      onclick: Login
    }, []
      icon {name: "box-arrow-in-right", class: "flex-shrink-0 me-1"}
      text t("actions.login")

// Actions

Login: Action<LoginState, Event> := (state: LoginState, _event: Event) ->
  return state unless submittable(state)

  state.dialog?.show()
  [{...state, disabled: true}, login(state.auth)]

LoginFailure: Action<LoginState, ResponseData> := (state, _response) ->
  state.dialog?.hide()
  []
    {...state, auth: {...state.auth, password: ""}, disabled: false}
    [runAlertFlash, state.flash]

EnterToSubmitOrNextInput: Action<LoginState, KeyboardEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if submittable(state)
      Login
    else if event.target.id is LOGIN_USERNAME_ID
      [state, focus(LOGIN_PASSWORD_ID)]
    else
      [state, focus(LOGIN_USERNAME_ID)]
  else
    state

UpdateUsername: Action<LoginState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    auth: {...state.auth, username: event.target.value}
    flash: {}
      ...state.flash
      valid: {...state.flash?.valid, username: []}
      invalid: {...state.flash?.invalid, username: []}

UpdatePassword: Action<LoginState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    auth: {...state.auth, password: event.target.value}
    flash: {}
      ...state.flash
      valid: {...state.flash?.valid, password: []}
      invalid: {...state.flash?.invalid, password: []}

// Effect Generators

login := (auth: AuthProps): Effect<LoginState> ->
  [runLogin, auth]

// Effecters

runLogin: Effecter<LoginState, AuthProps> := (dispatch, auth) ->
  createAuth := createCreateAuth<LoginState> {}
    fallback: LoginFailure
    effects: [-> location.reload()]

  dispatch(createAuth, auth)

// App

init: Dispatchable<LoginState, any> := (_state) ->
  dialog := new Dialog {}
    id: LOGIN_ID
    centered: true
    title: t("actions.login")
    status: "running"
    closable: false
    messages: t("ui.messages.running", {name: t("actions.login")})
  []
    {}
      csrf: csrf()
      auth: {username: "", password: ""}
      disabled: false
      dialog
    focus<LoginState>(LOGIN_USERNAME_ID)

view := (state: LoginState): VNode<LoginState> ->
  html.div {},
    form.formNonSubmit {}, []
      loginTitle()
      loginUsernameInput({value: state.auth.username, state.disabled, ...flashValidation(state.flash, "username")})
      loginPasswordInput({value: state.auth.password, state.disabled, ...flashValidation(state.flash, "password")})
      loginSubmitButton({disabled: not submittable(state)})

export default loginApp := ->
  if node? := document.getElementById(LOGIN_ID)
    console.debug "start login app"
    app<LoginState> {init, view, node}
