// Login app

{app, text, type Action, type Dispatchable, type Effect, type Effecter,
  type VNode} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom
{delay} from @hyperapp/time

APIDialog from ~/common/api_dialog.civet
csrf from ~/common/csrf.civet
{t} from ~/common/i18n.civet

bsIcon from ~/app/bs_icon.civet

interface LoginInputState
  value: string
  error: string
  disabled: boolean

interface LoginState
  username: LoginInputState
  password: LoginInputState
  submittable: boolean

interface LoginPayload
  username: string
  password: string

LOGIN_ID := "login"
LOGIN_USERNAME_ID := "login-username"
LOGIN_PASSWORD_ID := "login-password"

apiDialog := new APIDialog {
  id: "login"
  name: "actions.login"
  method: "POST"
  path: "/api/auth"
  responseMessageCodeList: [
    [201, {status: "success", message: "login_succeeded", redirectTo: "^", reloadTime: 10}]
    [400, {status: "failure", message: "login_failed"}]
    [422, {status: "failure", message: "login_failed"}]
  ]
}

// Actions

Login: Action<LoginState, Event> := (state, _event) ->
  if state.submittable
    [{
      username: {...state.username, disabled: true}
      password: {...state.password, disabled: true}
      submittable: false
    }, login({username: state.username.value, password: state.password.value})]
  else
    state

EnterToSubmitOrNextInput: Action<LoginState, KeyboardEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if state.submittable
      Login
    else if event.target.id is LOGIN_USERNAME_ID
      [state, focus(LOGIN_PASSWORD_ID)]
    else
      [state, focus(LOGIN_USERNAME_ID)]
  else
    state

UpdateUsername: Action<LoginState, InputEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.password.value)
  {
    ...state
    username: {value, error: "", disabled: false}
    submittable
  }

UpdatePassword: Action<LoginState, InputEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.username.value)
  {
    ...state
    password: {value, error: "", disabled: false}
    submittable
  }

PreventSubmit: Action<LoginState, SubmitEvent> := (state, event) ->
  event.preventDefault()
  state

// Effecters

runLogin: Effecter<LoginState, LoginPayload> := (dispatch, payload) ->
  response := await apiDialog.submitPromise {data: {...csrf(), ...payload}}
  param_errors := response?.flash?.invalid

  action: Action<LoginState> := ({username, password, submittable}) ->
    focusTarget :=
      if param_errors?.username
        LOGIN_USERNAME_ID
      else
        LOGIN_PASSWORD_ID
    [
      {
        username: {username.value, error: param_errors?.username?.join("") ?? "",
          disabled: false}
        password: {value: "", error: param_errors?.password?.join("") ?? "",
          disabled: false}
        submittable
      }
      focus(focusTarget)
    ]
  dispatch(action)

// Effect Generators

login := (payload: LoginPayload): Effect<LoginState> ->
  [runLogin, payload]

// Views

loginTitle := (): VNode<LoginState> ->
  html.h3 {class: "login-title text-center mb-2"}, text t("actions.login")

loginUsernameInput := (
  {value, error, disabled}: LoginInputState
): VNode<LoginState> ->
  html.div {class: "mb-3"}, [
    html.input {
      id: LOGIN_USERNAME_ID
      class: ["form-control", {is-invalid: !!error}]
      type: "text"
      autocomplete: "username"
      required: true
      placeholder: t("ui.labels.username")
      disabled
      value
      oninput: UpdateUsername
      onkeypress: EnterToSubmitOrNextInput
    }
    html.div {class: "invalid-feedback"},
      text error
  ]

loginPasswordInput := (
  {value, error, disabled}: LoginInputState
): VNode<LoginState> ->
  html.div {class: "mb-3"}, [
    html.input {
      id: LOGIN_PASSWORD_ID
      class: ["form-control", {is-invalid: !!error}]
      type: "password"
      autocomplete: "current-password"
      required: true
      placeholder: t("ui.labels.password")
      disabled
      value
      oninput: UpdatePassword
      onkeypress: EnterToSubmitOrNextInput
    }
    html.div {class: "invalid-feedback"},
      text error
  ]

loginSubmitButton := ({submittable:: boolean}): VNode<LoginState> ->
  html.div {class: "d-grid gap-auto"},
    html.button {
      class: "btn btn-primary d-flex align-items-center justify-content-center"
      disabled: !submittable
      onclick: Login
    }, [
      bsIcon {name: "box-arrow-in-right", class: "flex-shrink-0 me-1"}
      text t("actions.login")
    ]

// App

init: Dispatchable<LoginState, any> := [
  {
    username: {value: "", error: "", disabled: false}
    password: {value: "", error: "", disabled: false}
    submittable: false
  }
  delay 10, (state: LoginState) -> [state, focus(LOGIN_USERNAME_ID)]
]

view := ({username, password, submittable}: LoginState): VNode<LoginState> ->
  html.div {},
    html.form {onsubmit: PreventSubmit}, [
      loginTitle()
      loginUsernameInput(username)
      loginPasswordInput(password)
      loginSubmitButton({submittable})
    ]

export default loginApp := ->
  if node? := document.getElementById(LOGIN_ID)
    console.debug "start login app"
    app<LoginState> {init, view, node}
