// Login app with API dialog
// FIXME: 多分必要なくなる。apiバージョンでいいなら、削除

{app, text, type Action, type Dispatchable, type Effect, type Effecter, type VNode} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
APIDialog from ~/common/api_dialog.civet

* as form from ~/app/form.civet
icon from ~/app/icon.civet

interface LoginInputProps
  value: string
  error: string
  disabled: boolean

interface LoginState
  username: LoginInputProps
  password: LoginInputProps
  submittable: boolean
  apiDialog: APIDialog

interface LoginData
  username: string
  password: string

LOGIN_ID := "login"
LOGIN_USERNAME_ID := "login-username"
LOGIN_PASSWORD_ID := "login-password"

// Actions

Login: Action<LoginState, Event> := (state, _event) ->
  if state.submittable
    []
      {}
        ...state
        username: {...state.username, disabled: true}
        password: {...state.password, disabled: true}
        submittable: false
      login {}
        apiDialog: state.apiDialog
        data: {username: state.username.value, password: state.password.value}
  else
    state

EnterToSubmitOrNextInput: Action<LoginState, KeyboardEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if state.submittable
      Login
    else if event.target.id is LOGIN_USERNAME_ID
      [state, focus(LOGIN_PASSWORD_ID)]
    else
      [state, focus(LOGIN_USERNAME_ID)]
  else
    state

UpdateUsername: Action<LoginState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.password.value)
  {}
    ...state
    username: {value, error: "", disabled: false}
    submittable

UpdatePassword: Action<LoginState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  value := event.target.value
  submittable := !!(value and state.username.value)
  {}
    ...state
    password: {value, error: "", disabled: false}
    submittable

PreventSubmit: Action<LoginState, SubmitEvent> := (state, event) ->
  event.preventDefault()
  state

// Effect Generators

login := (payload: {apiDialog: APIDialog, data: LoginData}):
  Effect<LoginState, {apiDialog: APIDialog, data: LoginData}> ->
  [runLogin, payload]

// Effecters

runLogin: Effecter<LoginState, {apiDialog: APIDialog, data: LoginData}> := (dispatch, {apiDialog, data}) ->
  response := await apiDialog.submitPromise {data: {...csrf(), ...data}}
  param_errors := response?.flash?.invalid

  action: Action<LoginState> := ({username, password, ...state}) ->
    focusTarget :=
      if param_errors?.username
        LOGIN_USERNAME_ID
      else
        LOGIN_PASSWORD_ID
    []
      {}
        ...state
        username: {}
          ...username
          error: param_errors?.username?.join("") ?? ""
          disabled: false
        password: {}
          ...password
          error: param_errors?.password?.join("") ?? ""
          disabled: false
      focus(focusTarget)
  dispatch(action)

// Views

loginTitle := (): VNode<LoginState> ->
  html.h3 {class: "login-title text-center mb-2"}, text t("actions.login")

loginUsernameInput := ({value, error, disabled}: LoginInputProps): VNode<LoginState> ->
  form.inputFloating {}
    id: LOGIN_USERNAME_ID
    label: t("ui.labels.username")
    type: "text"
    autocomplete: "username"
    required: true
    disabled
    value
    oninput: UpdateUsername
    onkeypress: EnterToSubmitOrNextInput
    invalid: error

loginPasswordInput := ({value, error, disabled}: LoginInputProps): VNode<LoginState> ->
  form.inputFloating {}
    id: LOGIN_PASSWORD_ID
    label: t("ui.labels.password")
    type: "password"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePassword
    onkeypress: EnterToSubmitOrNextInput
    invalid: error

loginSubmitButton := ({submittable:: boolean}): VNode<LoginState> ->
  html.div {class: "d-grid gap-auto"},
    html.button {
      class: "btn btn-primary d-flex align-items-center justify-content-center"
      disabled: !submittable
      onclick: Login
    }, []
      icon {name: "box-arrow-in-right", class: "flex-shrink-0 me-1"}
      text t("actions.login")

// App

init: Dispatchable<LoginState, any> := (_state) ->
  apiDialog := new APIDialog {}
    id: "login"
    name: "actions.login"
    method: "POST"
    path: "/api/auth"
    responseMessageCodeList: []
      [201, {status: "success", message: "login_succeeded", redirectTo: "^", reloadTime: 10}]
      [400, {status: "failure", message: "login_failed"}]
      [422, {status: "failure", message: "login_failed"}]

  []
    {}
      username: {value: "", error: "", disabled: false}
      password: {value: "", error: "", disabled: false}
      submittable: false
      apiDialog
    focus<LoginState>(LOGIN_USERNAME_ID)

view := ({username, password, submittable}: LoginState): VNode<LoginState> ->
  html.div {},
    html.form {onsubmit: PreventSubmit}, []
      loginTitle()
      loginUsernameInput(username)
      loginPasswordInput(password)
      loginSubmitButton({submittable})

export default loginApp := ->
  if node? := document.getElementById(LOGIN_ID)
    console.debug "start login app"
    app<LoginState> {init, view, node}
