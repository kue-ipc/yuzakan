// Login app

{app, text, type Action, type Dispatchable, type Effect, type Effecter,
  type VNode} from hyperapp
* as html from @hyperapp/html
{focus} from @hyperapp/dom
{delay} from @hyperapp/time

csrf from ~/common/csrf.civet
{t} from ~/common/i18n.civet

* as bsForm from ~/app/bs_form.civet
bsIcon from ~/app/bs_icon.civet
{runAlertFlash} from ~/app/alert.civet
{flashValidation, type Validation} from ~/common/flash.civet

{type ResponseData} from ~api/fetch_api.civet
{createCreateAuth, type AuthProps, type AuthState} from ~api/actions/auth.civet

interface LoginState extends AuthState
  disabled: boolean

interface LoginInputState < Validation
  value: string
  disabled: boolean

LOGIN_ID := "login"
LOGIN_USERNAME_ID := "login-username"
LOGIN_PASSWORD_ID := "login-password"

// fuction

submittable := (state: LoginState): boolean ->
  !(state.disabled or !state.auth.username or !state.auth.password)

// Actions

Login: Action<LoginState, Event> := (state: LoginState, _event: Event) ->
  if submittable(state)
    [{...state, disabled: true}, login(state.auth)]
  else
    state

EnterToSubmitOrNextInput: Action<LoginState, KeyboardEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if submittable(state)
      Login
    else if event.target.id is LOGIN_USERNAME_ID
      [state, focus(LOGIN_PASSWORD_ID)]
    else
      [state, focus(LOGIN_USERNAME_ID)]
  else
    state

UpdateUsername: Action<LoginState, InputEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    auth: {...state.auth, username: event.target.value}
    flash: {}
      ...state.flash
      valid: {...state.flash?.valid, username: []}
      invalid: {...state.flash?.invalid, username: []}

UpdatePassword: Action<LoginState, InputEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    auth: {...state.auth, password: event.target.value}
    flash: {}
      ...state.flash
      valid: {...state.flash?.valid, password: []}
      invalid: {...state.flash?.invalid, password: []}

PreventSubmit: Action<LoginState, SubmitEvent> := (state, event) ->
  event.preventDefault()
  state

LoginFailure: Action<LoginState, ResponseData> := (state, _response) ->
  []
    {...state, auth: {...state.auth, password: ""}, disabled: false}
    [runAlertFlash, state.flash]

// Effecters

runLogin: Effecter<LoginState, AuthProps> := (dispatch, auth) ->
  createAuth := createCreateAuth<LoginState>({
    fallback: LoginFailure
    effects: [reloadWindow(10)]
  })
  dispatch(createAuth, auth)

runReloadWindow: Effecter<LoginState, number> := (_dispach, sec) ->
  console.debug `reload windows after ${sec} seconds`
  setTimeout(-> location.reload(), sec)
  ;

// Effect Generators

login := (auth: AuthProps): Effect<LoginState> ->
  [runLogin, auth]

reloadWindow := (sec: number): Effect<LoginState> ->
  [runReloadWindow, sec]

// Views

loginTitle := (): VNode<LoginState> ->
  html.h3 {class: "login-title text-center mb-2"}, text t("actions.login")

loginUsernameInput := (
  {value, disabled, valid, invalid}: LoginInputState
): VNode<LoginState> ->
  bsForm.input {
    id: LOGIN_USERNAME_ID
    label: t("ui.labels.username")
    type: "text"
    layout: "floating"
    autocomplete: "username"
    required: true
    disabled
    value
    oninput: UpdateUsername
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid
  }

loginPasswordInput := (
  {value, disabled, valid, invalid}: LoginInputState
): VNode<LoginState> ->
 bsForm.input {
    id: LOGIN_PASSWORD_ID
    label: t("ui.labels.password")
    type: "password"
    layout: "floating"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePassword
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid
  }

loginSubmitButton := (
  {auth:: AuthProps, disabled:: boolean}
): VNode<LoginState> ->
  html.div {class: "d-grid gap-auto"},
    html.button {
      class: "btn btn-primary d-flex align-items-center justify-content-center"
      disabled: !disabled or !auth.username or !auth.password
      onclick: Login
    }, [
      bsIcon {name: "box-arrow-in-right", class: "flex-shrink-0 me-1"}
      text t("actions.login")
    ]

// App

init: Dispatchable<LoginState> := [
  {}
    csrf: csrf()
    auth: {username: "", password: ""}
    disabled: false
  delay 10, (state: LoginState) -> [state, focus(LOGIN_USERNAME_ID)]
]

view := (state: LoginState): VNode<LoginState> ->
  html.div {},
    html.form {onsubmit: PreventSubmit}, [
      loginTitle()
      loginUsernameInput({value: state.auth.username, state.disabled,
        ...flashValidation(state.flash, "username")})
      loginPasswordInput({value: state.auth.password, state.disabled,
        ...flashValidation(state.flash, "password")})
      loginSubmitButton({state.auth, disabled: submittable(state)})
    ]

export default loginApp := ->
  if node? := document.getElementById(LOGIN_ID)
    console.debug "start login app"
    app<LoginState> {init, view, node}
