// Bootstrap form App

{text, type ClassProp, type VNode, type CustomPayloads, type Props} from hyperapp
* as html from @hyperapp/html

InputTypeAttribute ::=
  | "button"
  | "checkbox"
  | "color"
  | "date"
  | "datetime-local"
  | "email"
  | "file"
  | "hidden"
  | "image"
  | "month"
  | "number"
  | "password"
  | "radio"
  | "range"
  | "reset"
  | "search"
  | "submit"
  | "tel"
  | "text"
  | "time"
  | "url"
  | "week"

interface InputCustomProps
  id: string
  label: string
  type: InputTypeAttribute

interface InputHelpProps
  valid?: string | string[]
  invalid?: string | string[]
  help?: string | string[]

InputProps<S> ::= InputCustomProps & InputHelpProps & CustomPayloads<S, {}> & Props<S>

// constants

LABEL_COL_CLASS := """
  col-sm-6
  col-md-4
  col-lg-3
  col-xl-2
"""

CONTROL_COL_CLASS := """
  col-sm-6
  col-md-8
  col-lg-6
  col-xl-5
"""

MESSAGE_COL_CLASS := """
  offset-md-4 col-md-8
  offset-lg-0 col-lg-3
  col-xl-5
"""

// fuctions

msgJoin := (msg?: string | string[]): string? ->
  if msg <? Array
    msg.join("")
  else
    msg

msgPresent := (msg?: string | string[]): boolean ->
  (msgJoin(msg)?.length ?? 0) > 0

msgTag := <S>(msg: string? | string[], props: any = {}): VNode<S>? ->
  html.div props, html.text msgJoin(msg) if msgPresent(msg)

inputHelpTags := <S>({id, class: klass, valid, invalid, help}: {id: string, class?: ClassProp} & InputHelpProps): VNode<S>[] ->
  [
    msgTag<S>(valid, {id: `${id}-valid`, class: ["valid-feedback", klass]})
    msgTag<S>(invalid, {id: `${id}-invalid`, class: ["invalid-feedback", klass]})
    msgTag<S>(help, {id: `${id}-help`, class: ["form-text", klass]})
  ].filter((x) -> x?)

inputValidationClass := ({valid, invalid}: Pick<InputHelpProps, "valid" | "invalid">): ClassProp ->
  {is-valid: msgPresent(valid), is-invalid: msgPresent(invalid)}

// Views

export inputNormal := <S>({
  id
  label
  valid
  invalid
  help
  class: klass
  ...props
}: InputProps<S>): VNode<S> ->
  html.div {class: [klass, "mb-3"]}, []
    html.label {class: "form-label", for: id}, text label
    html.input {}
      id
      class: ["form-control", inputValidationClass({valid, invalid})]
      aria-describedby:  `${id}-help` if msgPresent(help)
      ...props
    ...inputHelpTags({id, valid, invalid, help})

export inputFloating := <S>({
  id
  label
  valid
  invalid
  help
  class: klass
  ...props
}: InputProps<S>) ->
  html.div {class: [klass, "form-floating mb-3"]}, []
    html.input {}
      id
      class: ["form-control", inputValidationClass({valid, invalid})]
      placeholder: label
      aria-describedby:  `${id}-help` if msgPresent(help)
      ...props
    html.label {for: id}, text label
    ...inputHelpTags({id, valid, invalid, help})

export inputHorizontal := <S>({
  id
  label
  valid
  invalid
  help
  class: klass
  ...props
}: InputProps<S>): VNode<S> ->
  html.div {class: [klass, "row mb-3"]}, []
    html.label {class: ["col-form-label", LABEL_COL_CLASS], for: id}, text label
    html.div {class: CONTROL_COL_CLASS}, []
      html.input {}
        id
        class: ["form-control", inputValidationClass({valid, invalid})]
        aria-describedby:  `${id}-help` if msgPresent(help)
        ...props
      ...inputHelpTags({id, class: MESSAGE_COL_CLASS, valid, invalid, help})

export inputInline := <S>({
  id
  label
  valid
  invalid
  help
  class: klass
  ...props
}: InputProps<S>): VNode<S> ->
  html.div {class: klass}, []
    html.label {class: "visually-hidden", for: id}, text label
    html.input {}
      id
      class: ["form-control", inputValidationClass({valid, invalid})]
      placeholder: label
      aria-describedby:  `${id}-help` if msgPresent(help)
      ...props
    ...inputHelpTags({id, valid, invalid, help})
