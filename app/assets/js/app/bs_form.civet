// Bootstrap form App

{text, type ClassProp, type VNode} from hyperapp
* as html from @hyperapp/html

InputLayout ::=
  | "normal"
  | "floating"

InputTypeAttribute ::=
  | "button"
  | "checkbox"
  | "color"
  | "date"
  | "datetime-local"
  | "email"
  | "file"
  | "hidden"
  | "image"
  | "month"
  | "number"
  | "password"
  | "radio"
  | "range"
  | "reset"
  | "search"
  | "submit"
  | "tel"
  | "text"
  | "time"
  | "url"
  | "week"

// Views

export input := <S>({
  layout:: InputLayout = "normal"
  id:: string
  valid?:: string | string[]
  invalid?:: string | string[]
  help?:: string | string[]
  class: klass?:: ClassProp
  ...props:: any
}): VNode<S> ->
  valid = valid.join("") if valid <? Array
  invalid = invalid.join("") if invalid <? Array
  help = help.join("") if invalid <? Array
  inputClass := []
    klass
    "form-control"
    {is-valid: valid, is-invalid: invalid}
  helpId := `${id}-help` if help

  inputProps := {}
    id
    inputClass
    helpId
    valid
    invalid
    help
    ...props

  switch layout
    when "normal"
      input_noraml inputProps
    when "floating"
      input_floating inputProps
    else
      throw new Error(`unkonwn layout: ${layout}`)

input_noraml := <S>({
  id:: string
  label:: string
  type:: InputTypeAttribute
  valid?:: string
  invalid?:: string
  help?:: string
  helpId?:: string
  inputClass:: ClassProp
  wrapClass?:: ClassProp
  ...props:: any
}): VNode<S> ->
  html.div {class: [wrapClass, "mb-3"]}, [
    html.label {class: "form-label", for: id}, text label
    html.input {
      id, type, class: inputClass
      aria-describedby: helpId
      ...props
    }
    html.div {class: "invalid-feedback"}, text valid if valid
    html.div {class: "invalid-feedback"}, text invalid if invalid
    html.div {id: helpId, class: "form-text"}, text help if help
  ]

input_floating := ({
  id:: string
  label:: string
  type:: InputTypeAttribute
  valid?:: string
  invalid?:: string
  help?:: string
  helpId?:: string
  inputClass:: ClassProp
  wrapClass?:: ClassProp
  ...props:: any
}) ->
  html.div {class: [wrapClass, "form-floating mb-3"]}, [
    html.input {
      ...props
      id, type, class: inputClass
      aria-describedby: helpId
      placeholder: label
    }
    html.label {for: id}, text label
    html.div {class: "invalid-feedback"}, text valid if valid
    html.div {class: "invalid-feedback"}, text invalid if invalid
    html.div {id: helpId, class: "form-text"}, text help if help
  ]

