// Bootstrap form App

{text, type ClassProp, type VNode, type CustomPayloads, type Props} from hyperapp
* as html from @hyperapp/html

InputLayout ::=
  | "normal"
  | "floating"

InputTypeAttribute ::=
  | "button"
  | "checkbox"
  | "color"
  | "date"
  | "datetime-local"
  | "email"
  | "file"
  | "hidden"
  | "image"
  | "month"
  | "number"
  | "password"
  | "radio"
  | "range"
  | "reset"
  | "search"
  | "submit"
  | "tel"
  | "text"
  | "time"
  | "url"
  | "week"

interface InputCustomProps
  id: string
  label: string
  type: InputTypeAttribute
  layout?: InputLayout
  wrapClass?: ClassProp

interface InputHelpProps
  valid?: string | string[]
  invalid?: string | string[]
  help?: string | string[]

InputProps<S> ::= InputCustomProps & InputHelpProps & CustomPayloads<S, {}> & Props<S>

// fuctions

msgJoin := (msg?: string | string[]): string? ->
  if msg <? Array
    msg.join("")
  else
    msg

msgPresent := (msg?: string | string[]): boolean ->
  (msgJoin(msg)?.length ?? 0) > 0

msgTag := <S>(msg: string? | string[], props: any = {}): VNode<S>? ->
  html.div props, html.text msgJoin(msg) if msgPresent(msg)

inputHelpTags := <S>({id, valid, invalid, help}: {id: string} & InputHelpProps): VNode<S>[] ->
  [
    msgTag<S>(valid, {id: `${id}-valid`, class: "valid-feedback"})
    msgTag<S>(invalid, {id: `${id}-invalid`, class: "valid-feedback"})
    msgTag<S>(help, {id: `${id}-help`, class: "form-text"})
  ].filter((x) -> x?)

// Views

export input := <S>({
  layout = "normal"
  valid
  invalid
  class: klass
  ...props
}: InputProps<S>): VNode<S> ->
  inputClass := []
    klass
    "form-control"
    {is-valid: msgPresent(valid), is-invalid: msgPresent(invalid)}

  inputProps := {}
    class: inputClass
    valid
    invalid
    ...props

  switch layout
    when "normal"
      input_noraml inputProps
    when "floating"
      input_floating inputProps
    else
      throw new Error(`unkonwn layout: ${layout}`)

input_noraml := <S>({
  id
  label
  layout
  valid
  invalid
  help
  wrapClass
  ...props
}: InputProps<S>): VNode<S> ->
  html.div {class: [wrapClass, "mb-3"]}, []
    html.label {class: "form-label", for: id}, text label
    html.input {}
      id
      aria-describedby:  `${id}-help` if msgPresent(help)
      ...props
    ...inputHelpTags({id, valid, invalid, help})

input_floating := <S>({
  id
  label
  valid
  invalid
  help
  wrapClass
  ...props
}: InputProps<S>) ->
  html.div {class: [wrapClass, "form-floating mb-3"]}, []
    html.input {}
      id
      aria-describedby:  `${id}-help` if msgPresent(help)
      placeholder: label
      ...props
    html.label {for: id}, text label
    ...inputHelpTags({id, valid, invalid, help})
