// Logout app

{app, text, type Action, type Effecter, type Effect, type Dispatchable} from hyperapp
* as html from @hyperapp/html

icon from ~/app/icon.civet

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
APIDialog from ~/common/api_dialog.civet

interface LogoutState
  disabled: boolean
  apiDialog: APIDialog

interface LogoutPayload
  apiDialog: APIDialog

LOGOUT_ID := "logout"

// fuctions

submittable := (state: LogoutState): boolean ->
  !(state.disabled)

// Actions

Logout: Action<LogoutState, Event> := (state, _event) ->
  return state unless submittable(state)

  [{...state, disabled: true}, logout({apiDialog: state.apiDialog})]

// Effect Generotors

logout := (payload: LogoutPayload): Effect<LogoutState, LogoutPayload> ->
  [runLogout, payload]

// Effecters

runLogout: Effecter<LogoutState, LogoutPayload> := (dispatch, {apiDialog}) ->
  await apiDialog.submitPromise {data: csrf()}
  dispatch (state) -> ({...state, disabled: false})

// App

init: Dispatchable<LogoutState, unknown> := (_state) ->
  apiDialog := new APIDialog {}
    id: LOGOUT_ID
    name: "actions.logout"
    method: "DELETE"
    path: "/api/auth"
    responseMessageCodeList: []
      [200, {status: "success", message: "logout_succeeded", redirectTo: "/"}]
      [410, {status: "error", message: "logout_failed", reload: true}]
  {disabled: false, apiDialog}

view := (state: LogoutState) ->
  html.button<LogoutState> {
    state.disabled
    onclick: Logout
  }, [
    icon {name: "box-arrow-right", class: "flex-shrink-0 me-1"}
    html.span {class: "d-sm-none d-md-inline"}, text t("actions.logout")
  ]

export default logoutApp := ->
  if node? := document.getElementById(LOGOUT_ID)
    console.debug "start logout app"
    app<LogoutState> {init, view, node}
