// Logout app

{app, text, type Action, type Effecter, type Effect, type Dispatchable} from hyperapp
* as html from @hyperapp/html

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
icon from ~/app/icon.civet
Dialog from ~/common/dialog.civet

{runAlertFlash} from ~/app/alert.civet

{type ResponseData} from ~api/fetch_api.civet
{createDestroyAuth, type AuthState} from ~api/actions/auth.civet

interface LogoutState < AuthState
  disabled: boolean
  dialog: Dialog

LOGOUT_ID := "logout"

// fuctions

submittable := (state: LogoutState): boolean ->
  !(state.disabled)

// Actions

Logout: Action<LogoutState, Event> := (state, _event: Event) ->
  return state unless submittable(state)

  state.dialog?.show()
  [{...state, disabled: true}, logout()]

LogoutFailure: Action<LogoutState, ResponseData> := (state, _response) ->
  state.dialog?.hide()
  []
    {...state, auth: {...state.auth, password: ""}, disabled: false}
    [runAlertFlash, state.flash]


// Effect Generotors

logout := (): Effect<LogoutState> ->
  runLogout

// Effecters

runLogout: Effecter<LogoutState> := (dispatch) ->
  destroyAuth := createDestroyAuth<LogoutState> {}
    fallback: LogoutFailure
    effects: [-> location.reload()]

  dispatch(destroyAuth)

// App

init: Dispatchable<LogoutState, any> := (_state) ->
  dialog := new Dialog {}
    id: LOGOUT_ID
    centered: true
    title: t("actions.logout")
    status: "running"
    closable: false
    messages: t("ui.messages.running", {name: t("actions.logout")})
  {}
    csrf: csrf()
    auth: {username: "", password: ""}
    disabled: false,
    dialog

view := (state: LogoutState) ->
  html.button<LogoutState> {
    state.disabled
    onclick: Logout
  }, [
    icon {name: "box-arrow-right", class: "flex-shrink-0 me-1"}
    html.span {class: "d-sm-none d-md-inline"}, text t("actions.logout")
  ]

export default logoutApp := ->
  if node? := document.getElementById(LOGOUT_ID)
    console.debug "start logout app"
    app<LogoutState> {init, view, node}
