// Theme app

{app, text, type Dispatch} from hyperapp
* as html from @hyperapp/html
bsIcon from ~/app/bs_icon.civet
{t} from ~/common/i18n.civet
Theme from ~/common/theme.civet

interface ThemeState
  theme: Theme

// Actions

ChangeTheme := (state: ThemeState, theme: Theme) ->
  [{theme}, applyTheme(theme)]

// Effecters

runApplyTheme := (_dispatch: Dispatch<ThemeState>, theme: Theme) ->
  theme.apply()
  Theme.storedTheme = theme

// Effect Generators

applyTheme := (theme: Theme) ->
  [runApplyTheme, theme]

// Views

themeToggleButton := ({theme:: Theme}) ->
  html.button {
    id: "theme-toggle"
    class: "btn btn-link nav-link dropdown-toggle d-flex align-items-center"
    type: "button"
    disabled: false
    aria-expanded: "false"
    aria-label: t("messages.toggle_theme")
    data-bs-toggle: "dropdown"
    data-bs-display: "static"
  }, [
    bsIcon({name: theme.icon, class: "flex-shrink-0"})
    html.span {id: "theme-text", class: "ms-1 d-sm-none d-lg-inline"},
      text t("ui.buttons.toggle_theme")
  ]

themeList := ({theme: currentTheme:: Theme}) ->
  html.ul {class: "dropdown-menu", aria-labelledby: "theme-text"},
    Theme.LIST.map (theme) ->
      themeListItem({theme, active: theme.name is currentTheme.name})

themeListItem := ({theme:: Theme, active:: boolean}) ->
  html.li {},
    html.button {
      class: ["dropdown-item d-flex align-items-center", {active}]
      type: "button"
      aria-pressed: "false"
      onclick: -> [ChangeTheme, theme]
    }, [
      bsIcon({name: theme.icon, class: "flex-shrink-0"})
      html.span {class: "ms-1 d-sm-none d-lg-inline"},
        text theme.label
    ]

// App

init := {theme: Theme.storedTheme}

view := ({theme}: ThemeState) ->
  html.li {class: "nav-item dropdown"}, [
    themeToggleButton({theme})
    themeList({theme})
  ]

export default themeApp := ->
  if node? := document.getElementById("theme")
    console.debug "start theme app"
    app<ThemeState> {init, view, node}
