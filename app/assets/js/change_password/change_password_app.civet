// Change Password app

{app, text, type Action, type Effecter, type Effect, type Dispatchable, type VNode} from hyperapp
* as html from @hyperapp/html
{now} from @hyperapp/time
{focus} from @hyperapp/dom

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
Dialog from ~/common/dialog.civet
{flashValidation, type Validation} from ~/common/flash.civet

* as form from ~/app/form.civet
icon from ~/app/icon.civet
{runAlertFlash} from ~/app/alert.civet

{type ResponseData} from ~api/fetch_api.civet
{createShowConfig, type ConfigState} from ~api/actions/config.civet
{createUpdateUserPassword, type UserPasswordState, type UserPasswordProps} from ~api/actions/user_password.civet

interface ChangePasswordState < UserPasswordState, ConfigState
  disabled: boolean
  dialog: Dialog

interface PasswordInputState < Validation
  value: string
  disabled: boolean

CHANGE_PASSWORD_ID := "change-password"
CHANGE_PASSWORD_CURRENT_ID := "change-password-current"
CHANGE_PASSWORD_NEW_ID := "change-password-new"
CHANGE_PASSWORD_CONFIRM_ID := "change-password-confirm"


// fuctions

submittable := (state: ChangePasswordState): boolean ->
  not state.disabled

// Views

changePasswordTitle := (): VNode<ChangePasswordState> ->
  html.h2 {class: "h5 mb-3"}, text t("actions.change_password")

passwordCurrentInput := ({value, disabled, valid, invalid}: PasswordInputState): VNode<ChangePasswordState> ->
  form.inputFloating {}
    id: CHANGE_PASSWORD_CURRENT_ID
    label: t("ui.labels.change_password.password_current")
    type: "text"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePasswordCurrent
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid

passwordInput := ({value, disabled, valid, invalid}: PasswordInputState): VNode<ChangePasswordState> ->
  form.inputFloating {}
    id: CHANGE_PASSWORD_NEW_ID
    label: t("ui.labels.change_password.password")
    type: "text"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePassword
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid

passwordConfirmationInput := ({value, disabled, valid, invalid}: PasswordInputState): VNode<ChangePasswordState> ->
  form.inputFloating {}
    id: CHANGE_PASSWORD_CONFIRM_ID
    label: t("ui.labels.change_password.password_confirmation")
    type: "text"
    autocomplete: "current-password"
    required: true
    disabled
    value
    oninput: UpdatePasswordConfirmation
    onkeypress: EnterToSubmitOrNextInput
    valid
    invalid

changePasswordSubmitButton := ({disabled:: boolean}): VNode<ChangePasswordState> ->
  html.button<ChangePasswordState> {
    disabled
    onclick: ChangePassword
  }, []
    icon {name: "box-arrow-right", class: "flex-shrink-0 me-1"}
    html.span {class: "d-sm-none d-md-inline"}, text t("actions.change_password")

// Actions

ChangePassword: Action<ChangePasswordState, Event> := (state, _event: Event) ->
  return state unless submittable(state)

  state.dialog?.show()
  [{...state, disabled: true}, changePassword(state.userPassword)]

ChangePasswordFailure: Action<ChangePasswordState, ResponseData> := (state, _response) ->
  state.dialog?.hide()
  []
    {...state, disabled: false}
    [runAlertFlash, state.flash]

EnterToSubmitOrNextInput: Action<ChangePasswordState, KeyboardEvent> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  if event.code is "Enter"
    if submittable(state)
      ChangePassword
    else if event.target.id is CHANGE_PASSWORD_CURRENT_ID
      [state, focus(CHANGE_PASSWORD_NEW_ID)]
    else if event.target.id is CHANGE_PASSWORD_NEW_ID
      [state, focus(CHANGE_PASSWORD_CONFIRM_ID)]
    else
      [state, focus(CHANGE_PASSWORD_CURRENT_ID)]
  else
    state

UpdatePasswordCurrent: Action<ChangePasswordState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    userPassword: {...state.userPassword, passwordCurrent: event.target.value}
    flash: {}
      valid: {...state.flash?.valid, passwordCurrent: []}
      invalid: {...state.flash?.invalid, passwordCurrent: []}

UpdatePassword: Action<ChangePasswordState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    userPassword: {...state.userPassword, password: event.target.value}
    flash: {}
      valid: {...state.flash?.valid, passwordCurrent: []}
      invalid: {...state.flash?.invalid, passwordCurrent: []}

UpdatePasswordConfirmation: Action<ChangePasswordState, Event> := (state, event) ->
  unless event.target <? HTMLInputElement
    console.warn "event target is not html input element"
    return state

  {}
    ...state
    userPassword: {...state.userPassword, passwordConfirmation: event.target.value}
    flash: {}
      valid: {...state.flash?.valid, passwordCurrent: []}
      invalid: {...state.flash?.invalid, passwordCurrent: []}

// Effect Generotors

changePassword := (userPassword: UserPasswordProps): Effect<ChangePasswordState> ->
  [runChangePassword, userPassword]

// Effecters

runChangePassword: Effecter<ChangePasswordState, UserPasswordProps> := (dispatch, userPassword) ->
  updateUserPassword := createUpdateUserPassword<ChangePasswordState> {}
    fallback: ChangePasswordFailure
    effects: [-> location.href = "/";]

  console.debug "run change password", userPassword
  dispatch(updateUserPassword, userPassword)

// App

init: Dispatchable<ChangePasswordState, any> := (_state) ->
  dialog := new Dialog {}
    id: CHANGE_PASSWORD_ID
    centered: true
    title: t("actions.change_password")
    status: "running"
    closable: false
    messages: t("ui.messages.running", {name: t("actions.change_password")})
  []
    {}
      csrf: csrf()
      userPassword: {}
        id: "~",
        passwordCurrent: "",
        password: ""
        passwordConfirmation: ""
      disabled: false,
      dialog
    now<ChangePasswordState>((_s)-> createShowConfig<ChangePasswordState>() )

view := (state: ChangePasswordState): VNode<ChangePasswordState> ->
  html.div {},
    form.formNonSubmit {}, []
      changePasswordTitle()
      passwordCurrentInput {}
        value: state.userPassword.passwordCurrent ?? "",
        state.disabled,
        ...flashValidation(state.flash, "passwordCurrent")
      passwordInput {}
        value: state.userPassword.password,
        state.disabled,
        ...flashValidation(state.flash, "password")
      passwordConfirmationInput {}
        value: state.userPassword.passwordConfirmation ?? "",
        state.disabled,
        ...flashValidation(state.flash, "passwordConfirmation")
      changePasswordSubmitButton({disabled: not submittable(state)})

export default changePasswordApp := ->
  if node? := document.getElementById(CHANGE_PASSWORD_ID)
    console.debug "start change password app"
    app<ChangePasswordState> {init, view, node}
