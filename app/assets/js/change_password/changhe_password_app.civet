// Change Password app

{app, text, type Action, type Effecter, type Effect, type Dispatchable, type VNode} from hyperapp
* as html from @hyperapp/html
{now} from @hyperapp/time
{focus} from @hyperapp/dom

{t} from ~/common/i18n.civet
csrf from ~/common/csrf.civet
Dialog from ~/common/dialog.civet
{flashValidation, type Validation} from ~/common/flash.civet

* as form from ~/app/form.civet
icon from ~/app/icon.civet
{runAlertFlash} from ~/app/alert.civet

{type ResponseData} from ~api/fetch_api.civet
{createShowConfig, type ConfigState} from ~api/actions/config.civet
{createUpdateUserPassword, type UserPasswordState, type UserPasswordProps} from ~api/actions/user_password.civet

interface ChangePasswordState < UserPasswordState, ConfigState
  disabled: boolean
  dialog: Dialog

CHANGE_PASSWORD_ID := "change-password"

// fuctions

submittable := (state: ChangePasswordState): boolean ->
  !(state.disabled)

// Actions

ChangePassword: Action<ChangePasswordState, Event> := (state, _event: Event) ->
  return state unless submittable(state)

  state.dialog?.show()
  [{...state, disabled: true}, changePassword(state.user)]

ChangePasswordFailure: Action<ChangePasswordState, ResponseData> := (state, _response) ->
  state.dialog?.hide()
  []
    {...state, disabled: false}
    [runAlertFlash, state.flash]

// Effect Generotors

changePassword := (user: UserPasswordProps): Effect<ChangePasswordState> ->
  [runChangePassword, user]

// Effecters

runChangePassword: Effecter<ChangePasswordState, UserPasswordProps> := (dispatch) ->
  updateUserPassword := createUpdateUserPassword<ChangePasswordState> {}
    fallback: ChangePasswordFailure
    effects: [-> location.href = "/";]

  dispatch(updateUserPassword)

// App

init: Dispatchable<ChangePasswordState, any> := (_state) ->
  dialog := new Dialog {}
    id: CHANGE_PASSWORD_ID
    centered: true
    title: t("actions.change_password")
    status: "running"
    closable: false
    messages: t("ui.messages.running", {name: t("actions.change_password")})
  []
    {}
      csrf: csrf()
      user: {id: "~", password: {current: "", new: "", confirmation: ""}}
      disabled: false,
      dialog
    now<ChangePasswordState>((_s)-> createShowConfig<ChangePasswordState>() )

view := (state: ChangePasswordState): VNode<ChangePasswordState> ->
  html.div {},
    form.formNonSubmit {}, []
      changePasswordTitle()
      currentPasswordInput {}
        value: state.user.password.current,
        state.disabled,
        ...flashValidation(state.flash, "password.current")
      newPasswordInput {}
        value: state.user.password.new,
        state.disabled,
        ...flashValidation(state.flash, "password.new")
      confirmPasswordInput {}
        value: state.user.password.confirmation,
        state.disabled,
        ...flashValidation(state.flash, "password.confirmation")
      changePasswordSubmitButton({disabled: submittable(state)})
  html.button<ChangePasswordState> {
    state.disabled
    onclick: ChangePassword
  }, [
    icon {name: "box-arrow-right", class: "flex-shrink-0 me-1"}
    html.span {class: "d-sm-none d-md-inline"}, text t("actions.changePassword")
  ]

export default logoutApp := ->
  if node? := document.getElementById(CHANGE_PASSWORD_ID)
    console.debug "start change password app"
    app<ChangePasswordState> {init, view, node}
