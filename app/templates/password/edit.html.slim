= markdown(t("views.password_edit.change_password.description"))

= javascript_tag "password_edit/app", type: "module"

/ .change_password.mx-auto.p-3.border.rounded.mb-2
/   = form_for form do
/     - fields_for :password do
/       - div id: 'change-password', 'data-change-password': ha(JSON.generate(change_password_data))

- if included_providers&.size&.positive?
  = markdown(t("views.password_edit.change_password.targets.included"))
  p
    = t("views.password_edit.change_password.included_providers")
    | :
    =< included_providers.map(&:label).join(" ")
- elsif excluded_providers&.size&.positive?
  = markdown(t("views.password_edit.change_password.targets.excluded"))
  p
    = t("views.password_edit.change_password.excluded_providers")
    | :
    =< excluded_providers.map(&:label).join(" ")
- else
  = markdown(t("views.password_edit.change_password.targets.all"))

hr

h3 = t("views.password_edit.password_requirements.title")
= markdown(t("views.password_edit.password_requirements.description"))
ul
  li = markdown(t("views.password_edit.password_requirements.requirements.size",
    min: current_config.password_min_size, max: current_config.password_max_size))
  li
    - case current_config.password_prohibited_chars
    - when ""
      = markdown(t("views.password_edit.password_requirements.requirements.chars.only.ascii"))
    - when " "
      = markdown(t("views.password_edit.password_requirements.requirements.chars.only.ascii_without_space"))
    - when / /
      = markdown(t("views.password_edit.password_requirements.requirements.chars.only.prohibited_without_space"))
      p
        = t("views.password_edit.password_requirements.requirements.chars.prohibited_chars")
        | :
        - current_config.password_prohibited_chars.delete(' ').each_char do |char|
          strong<>
            code
              = char
    - else
      = markdown(t("views.password_edit.password_requirements.requirements.chars.only.prohibited"))
      p
        = t("views.password_edit.password_requirements.requirements.chars.prohibited_chars")
        | :
        - current_config.password_prohibited_chars.each_char do |char|
          strong<>
            code
              = char
    p
      small.text-secondary = markdown(t("views.password_edit.password_requirements.requirements.chars.note"))
  - if current_config.password_min_types > 2
    li
      - if current_config.password_min_types == 4
        = markdown(t("views.password_edit.password_requirements.requirements.types.all"))
      - else
        = markdown(t("views.password_edit.password_requirements.requirements.types.some",
          num: current_config.password_min_types))
  - if current_config.password_min_score.positive?
    li = markdown(t("views.password_edit.password_requirements.requirements.score"))

h3 = t("views.password_edit.password_strength.title")

= markdown(t("views.password_edit.password_strength.description"))
