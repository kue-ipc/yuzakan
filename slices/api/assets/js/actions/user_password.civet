// /users/:id/password

{type Action, type Dispatchable} from hyperapp
// {mergeDeepRight} from "ramda"

{
  createActionFallback, createCreateInId, createUpdateInId,
  type ActionFallback, type ActionFallbackEffects, type ActionOtherParams,type ResponseState
} from ~api/app_creator.civet

export interface UserPasswordProps
  id: string
  passwordCurrent?: string
  password: string
  passwordConfirmation?: string
  providers?: string[]

export interface UserPasswordState < ResponseState
  userPassword: UserPasswordProps

// Actions

SetUserPassword := <S < UserPasswordState>(state: S, userPassword: UserPasswordProps): Dispatchable<S> ->
  {}
    ...state
    userPassword: {}
      ...state.userPassword
      ...userPassword

// create Actions

createActionFallbackSetUserPassword := <S < UserPasswordState>(
  actionFallbackEffects: ActionFallbackEffects<S, UserPasswordProps> = {}
): ActionFallback<S, UserPasswordProps> ->
  createActionFallback({action: SetUserPassword, ...actionFallbackEffects})

// exports

// create Actions

export createCreateUserPassword := <S < UserPasswordState>(
  actionFallbackEffects: ActionFallbackEffects<S, UserPasswordProps> = {}
  params: ActionOtherParams = {}
): Action<S, UserPasswordProps> ->
  actionFallback := createActionFallbackSetUserPassword(actionFallbackEffects)
  createCreateInId("users", "password", actionFallback, params)

export createUpdateUserPassword := <S < UserPasswordState>(
  actionFallbackEffects: ActionFallbackEffects<S, UserPasswordProps> = {}
  params: ActionOtherParams = {}
): Action<S, UserPasswordProps> ->
  actionFallback := createActionFallbackSetUserPassword(actionFallbackEffects)
  createUpdateInId("users", "password", actionFallback, params)

// Actions

export CreateUserPassword := createCreateUserPassword()
export UpdateUserPassword := createUpdateUserPassword()
