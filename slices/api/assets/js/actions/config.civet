// /api/config

{type Action, type Dispatchable} from hyperapp

{
  createActionFallback, createShow, createUpdate,
  type ActionFallback, type ActionFallbackEffects, type ActionOtherParams,type ResponseState
} from ~api/app_creator.civet

export interface ConfigProps
  username: string
  password: string
  title: string
  description: string
  domain: string
  sessionTimeout: number
  authFailureWaiting: number
  authFailureLimit: number
  authFailureDuration: number
  passwordMinSize: string
  passwordMaxSize: string
  passwordMinTypes: string
  passwordProhibitedChars: string
  passwordMinScore: string
  passwordExtraDict: string[]
  generatePasswordSize: string
  generatePasswordType: string
  generatePasswordChars: string
  contactName: string
  contactEmail: string
  contactPhone: string
  createdAt: Date
  updatedAt: Date

export interface ConfigState < ResponseState
  config?: ConfigProps

// Actions

SetConfig := <S < ConfigState>(state: S, config: ConfigProps): Dispatchable<S> ->
  {...state, confifg: {...state.config, ...config}}

// create Actions

createActionFallbackSetConfig := <S < ConfigState>(actionFallbackEffects: ActionFallbackEffects<S, ConfigProps> = {}): ActionFallback<S, ConfigProps> ->
  createActionFallback({action: SetConfig, ...actionFallbackEffects})

// exports

// create Actions

export createShowConfig := <S < ConfigState>(
  actionFallbackEffects: ActionFallbackEffects<S, ConfigProps> = {}
  params: ActionOtherParams = {}
): Action<S, undefined> ->
  actionFallback := createActionFallbackSetConfig(actionFallbackEffects)
  createShow("config", actionFallback, params)

export createUpdateConfig := <S < ConfigState>(
  actionFallbackEffects: ActionFallbackEffects<S, ConfigProps> = {}
  params: ActionOtherParams = {}
): Action<S, ConfigProps> ->
  actionFallback := createActionFallbackSetConfig(actionFallbackEffects)
  createUpdate("config", actionFallback, params)

// Actions

export ShowConfig := createShowConfig()
export UpdateConfig := createUpdateConfig()
