// /api/groupscreateRunCreateWithId

// TODO: 古い

{
  createRunIndex
  createRunIndexWithPage
  createRunShowWithId
  createRunCreateWithId
  createRunUpdateWithId
  createRunDestroyWithId
} from ~api/hyper_json.civet

{PAGINATION_PARAM_TYPES} from ~api/pagination.civet
{SEARCH_PARAM_TYPES} from ~api/search.civet
{ORDER_PARAM_TYPES} from ~api/order.civet

{pickType} from ~/common/helper.civet

// Contants

export API_GROUPS := "/api/groups"

export GROUP_PROPERTIES := {}
  name: "string"
  label: "string"
  note: "string"
  primary: "boolean"
  prohibited: "boolean"
  deleted: "boolean"
  deleted_at: "datetime"

export GROUP_DATA_PROPERTIES := {}
  groupname: "string"
  label: "string"
  primary: "boolean"

export INDEX_GROUPS_OPTION_PARAM_TYPES := {}
  no_sync: "boolean"
  primary_only: "boolean"
  hide_prohibited: "boolean"
  show_deleted: "boolean"
  all: "boolean"

export INDEX_GROUPS_PARAM_TYPES := {}
  ...SEARCH_PARAM_TYPES
  ...ORDER_PARAM_TYPES
  ...INDEX_GROUPS_OPTION_PARAM_TYPES

export INDEX_WITH_PAGE_GROUPS_PARAM_TYPES := {}
  ...PAGINATION_PARAM_TYPES
  ...INDEX_GROUPS_PARAM_TYPES

export SHOW_GROUP_PARAM_TYPES := {}

export CREATE_GROUP_PARAM_TYPES := {}
  ...GROUP_PROPERTIES

export UPDATE_GROUP_PARAM_TYPES := {}
  ...GROUP_PROPERTIES

export DESTROY_GROUP_PARAM_TYPES := {}
  permanent: "boolean"

// Functions

export normalizeGroups := (groups, type = {}) ->
  normalizeGroup(group, type) for each group of groups

export normalizeGroup := (group, types = {}) ->
  servicesData :=
    if !group.services?
      {}
    else if group.services instanceof Array
      {services: group.services}
    else
      {
        services: (service for service, data in group.services when data?)
        services_data: new Map(
          [service, pickType(data, GROUP_DATA_PROPERTIES)] for service, data in group.services when data?
        )
      }

  {
    ...pickType(group, {...GROUP_PROPERTIES, ...types})
    ...servicesData
  }

// Actions

export SetGroups := (state, groups) ->
  {
    ...state
    groups
  }

export SetGroup := (state, group) ->
  {
    ...state
    group
  }

// create Effecters

export createRunIndexGroupsNoSync := ({data = {}, ...params} = {}) ->
  createRunIndex({
    action: SetGroups
    normalizer: normalizeGroups
    url: API_GROUPS
    dataTypes: INDEX_GROUPS_PARAM_TYPES
    data: {no_sync: true, ...data}
    ...params
  })

export createRunIndexWithPageGroups := (params = {}) ->
  createRunIndexWithPage({
    action: SetGroups
    normalizer: normalizeGroups
    url: API_GROUPS
    dataTypes: INDEX_WITH_PAGE_GROUPS_PARAM_TYPES
    ...params
  })

export createRunShowGroup := (params = {}) ->
  createRunShowWithId({
    action: SetGroup
    normalizer: normalizeGroup
    url: API_GROUPS
    dataTypes: SHOW_GROUP_PARAM_TYPES
    ...params
  })

export createRunCreateGroup := (params = {}) ->
  createRunCreateWithId({
    action: SetGroup
    normalizer: normalizeGroup
    url: API_GROUPS
    dataTypes: CREATE_GROUP_PARAM_TYPES
    ...params
  })

export createRunUpdateGroup := (params = {}) ->
  createRunUpdateWithId({
    action: SetGroup
    normalizer: normalizeGroup
    url: API_GROUPS
    dataTypes: UPDATE_GROUP_PARAM_TYPES
    ...params
  })

export createRunDestroyGroup := (params = {}) ->
  createRunDestroyWithId({
    action: SetGroup
    normalizer: normalizeGroup
    url: API_GROUPS
    dataTypes: DESTROY_GROUP_PARAM_TYPES
    ...params
  })

// Effecters
export runIndexGroupsNoSync := createRunIndexGroupsNoSync()
export runIndexWithPageGroups := createRunIndexWithPageGroups()
export runShowGroup := createRunShowGroup()
export runCreateGroup := createRunCreateGroup()
export runUpdateGroup := createRunUpdateGroup()
export runDestroyGroup := createRunDestroyGroup()
