/**
 * fetchAPI
 * APIと連携してデータをJSONで受け取る処理をする。
 */

{formDataToJson, formDataToUrlencoded, objToUrlencoded} from
  ~/helpers/form_helper.civet
{objToJson} from ~/helpers/obj_helper.civet
Pagination from ~api/pagination.civet

// export Method ::= "GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE"

export interface RequestParams < Omit<RequestInit, "body">
  data?: any

export interface ResponseData
  ok: boolean
  status: {code: number, message: string}
  location: URL
  csrf?: Record<string, string>
  flash?: Record<string, string | Record<string, string[]>>
  data?: any
  pagination?: Pagination

export fetchAPI := (path: string, params: RequestParams): Promise<ResponseData> ->
  request := createRequest(path, params)
  console.debug "fetch request: %s %s", request.method, request.url
  response := await fetch request
  console.debug "fetch response: %d %s", response.status, response.url
  parseResponse(response)

export fetchAPIGet := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "GET"})

export fetchAPIHead := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "HEAD"})

export fetchAPIPost := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "POST"})

export fetchAPIPut := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "PUT"})

export fetchAPIPatch := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "PATCH"})

export fetchAPIDelete := (path: string, params: RequestParams) ->
  fetchAPI(path, {...params, method: "DELETE"})

// create request
createRequest := (path: string, {data, method = "GET", headers, ...params}: RequestParams): Request ->
  headers = new Headers(headers)
  headers.set("Accept", "application/json")

  body :=
    if data?
      switch method
        when "GET", "HEAD"
          query :=
            if data <? "string"
              encodeURIComponent(data)
            else if data <? FormData
              formDataToUrlencoded(data)
            else
              objToUrlencoded(data)
          url.search = query
          undefined
        when "POST", "PUT", "PATCH", "DELETE"
          if data <? "string"
            data
          else if data <? FormData
            formDataToJson(data)
          else
            objToJson(data)
    else
      undefined

  if body?
    headers.append("Content-Type", "application/json")
    headers.append("Content-Length", body.length.toString())

  init: RequestInit := {}
    ...params
    mode: "same-origin"
    credentials: "same-origin"
    method: method
    headers
    body

  new Request(path, init)

parseResponse := (response: Response): Promise<ResponseData> ->
  mimeType := response.headers.get("Content-Type")?.split(";")[0]?.trim()
    ?.toLowerCase()
  if mimeType is not "application/json"
    throw new Error("response is not json")

  data := await response.json()
  responseData: ResponseData := {}
    ok: response.ok
    status: data.status as ResponseData["status"]
    location: new URL(data.location)

  responseData.csrf = data.csrf if data.csrf?
  responseData.flash = data.flash if data.flash
  responseData.data = data.data if data.data
  responseData.pagination =
    new Pagination(data.paginitaion) if data.paginitaion?
  
  responseData
