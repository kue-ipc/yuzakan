/**
 * fetchJson
 * APIと連携してデータをJSONで受け取る処理をする。
 */

HttpLinkHeader from http-link-header
{isPresent} from ~/common/helper.civet
{formDataToJson, formDataToUrlencoded} from ~/common/form_helper.civet
{objToJson, objToUrlencoded, toInteger} from ~/common/convert.civet
{extractPagination} from ~api/pagination.civet

export Method ::= "GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE"

Type ::= "json" | "urlencoded" | "form-data" | "text"

interface RequestParams < RequestInit
  path: string
  methed?: Method
  data?: {}
  type?: Type

interface ResponseData
  links?: any
  pagination: any
  type: undefined
  data: null
  ok: boolean
  code: number
  location: string

export fetchJson := (params: RequestParams) ->
  request := createRequest(params)
  console.debug "fetch request: %s %s", request.method, request.url
  response := await fetch request
  console.debug "fetch response: %d %s", response.status, response.url
  parseResponse(response)

export fetchJsonGet := (params: RequestParams) ->
  fetchJson({...params, method: "GET"})

export fetchJsonHead := (params: RequestParams) ->
  fetchJson({...params, method: "HEAD"})

export fetchJsonPost := (params: RequestParams) ->
  fetchJson({...params, method: "POST"})

export fetchJsonPut := (params: RequestParams) ->
  fetchJson({...params, method: "PUT"})

export fetchJsonPatch := (params: RequestParams) ->
  fetchJson({...params, method: "PATCH"})

export fetchJsonDelete := (params: RequestParams) ->
  fetchJson({...params, method: "DELETE"})

// create request
createRequest := ({path, method = "GET", data = {}, type = "json", ...params}:
  RequestParams): Request ->
  init: RequestInit := {}
    method: method
    mode: "same-origin"
    credentials: "same-origin"
    ...params

  headers := new Headers {
    "Accept": "application/json"
  }
 
  if isPresent(data)
    if ["POST", "PUT", "PATCH", "DELETE"].includes(method)
      switch type
        when "json"
          content_type = "application/json"
          if data instanceof FormData
            data = formDataToJson(data)
          else if typeof data is not "string"
            data = objToJson(data)
        when "urlencoded"
          content_type = "application/x-www-form-urlencoded"
          if data instanceof FormData
            data = formDataToUrlencoded(data)
          else if typeof data is not "string"
            data = objToUrlencoded(data)
        when "form-data"
          content_type = "multipart/form-data"
          unless data intanceof FormData
            throw new Error("Not implument")
        when "text"
          content_type = "text/plain"
          data = String(data)
        else
          throw new Error(`Unknown or unsupported type: ${type}`)
      headers.append("Content-Type", content_type)
      headers.append("Content-Length", data.length.toString())
      init.body = data
    else
      if data instanceof FormData
        query = formDataToUrlencoded(data)
      else if typeof data is "object"
        query = objToUrlencoded(data)
      else
        query = encodeURIComponent(data)
      url += "?" + query

  init.headers = headers

  new Request(url, init)

parseResponse := (response: Response) ->
  location := response.headers.get("Content-Location") ?? response.url

  contentType := response.headers.get("Content-Type")
  responseData :=
    if not contentType?
      {type: undefined, data: null}
    else if contentType.startsWith("application/json")
      {type: "json", data: await response.json()}
    else if contentType.startsWith("text/plain")
      {type: "text", data: await response.text()}
    else
      throw new Error(`Unknown or unsupported content type: ${contentType}`)

  contentRange := response.headers.get("Content-Range")
  paginationInfo :=
    if contentRange?
      {pagination: extractPagination(contentRange, location)}
    else
      {}

  linkHeader := response.headers.get("Link")
  linkInfo :=
    if linkHeader?
      {links: HttpLinkHeader.parse(linkHeader)}
    else
      {}

  {
    ok: response.ok
    code: toInteger(response.status)
    location
    ...responseData
    ...paginationInfo
    ...linkInfo
  }
