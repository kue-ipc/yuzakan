// path: /admin/services
// node: services

{text, app} from hyperapp
* as html from @hyperapp/html
{fetchAPIGet} from ~api/fetch_api.civet

serviceTr := ({service}) ->
  html.tr {}, [
    html.td {},
      html.a {href: `/admin/services/${service.name}`}, text service.name
    html.td {}, text service.label
    html.td {}, text service.adapter
    html.td {}, if service.check?
      if service.check
        html.span {class: "text-success"}, text "OK"
      else
        html.span {class: "text-danger"}, text "NG"
    else
      html.span {class: "text-secondary"}, text "確認中"
    html.td {}, if service.adapter is "local"
      html.a {
        class: "btn btn-primary btn-sm"
        href: `/admin/services/${service.name}/export`
        type: "application/json-lines"
        download: `${service.name}_${(new Date).getTime()}.jsonl` 
      }, text "取得"
    else
      ""
  ]

serviceAction := (state, {name, service}) ->
  name ?= service.name
  services := for each current of state.services
    if current.name is name
      {...current, ...service}
    else
      current
  {...state, services}

initAllServicesAction := (state, {services}) ->
  [
    {...state, services}
    ...([checkServiceRunner, {service}] for each service of services)
  ]

checkServiceRunner := (dispatch, {service}) ->
  response := await fetchAPIGet({url: `/api/services/${service.name}/check`})
  if response.ok
    dispatch(serviceAction, {name: service.name, service: response.data})
  else
    console.error response

indexAllServicesRunner := (dispatch) ->
  response := await fetchAPIGet({url: "/api/services"})
  if response.ok
    dispatch(initAllServicesAction, {services: response.data})
  else
    console.error response

init := [
  {services: []}
  [indexAllServicesRunner]
]

view := ({services}) ->
  html.table {class: "table"}, [
    html.thead {},
      html.tr {}, [
        html.th {}, text "プロバイダー名"
        html.th {}, text "表示名"
        html.th {}, text "アダプター"
        html.th {}, text "状態"
        html.th {}, text "エクスポート"
      ]
    html.tbody {}, (serviceTr({service}) for each service of services)
  ]

node := document.getElementById("services")

app {init, view, node}
