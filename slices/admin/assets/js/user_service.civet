{text} from hyperapp
* as html from @hyperapp/html

{entityLabel} from ~/common/helper.civet

bsIcon from ~/app/bs_icon.civet
valueDisplay from ~/app/value_display.civet

PROVIDER_REG_ITEMS := [
  {name: "username", label: "ユーザー名", type: "string"}
  {name: "label", label: "表示名", type: "string"}
  {name: "email", label: "メールアドレス", type: "string"}
  {name: "locked", label: "ロック", type: "boolean"}
  {name: "unmanageable", label: "管理不可", type: "boolean"}
  {name: "mfa", label: "多要素", type: "boolean"}
]

userAddServiceAction := (state, {service_name}) ->
  if state.user.services.includes(service_name)
    state
  else
    {
      ...state
      user: {
        ...state.user
        services: [...state.user.services, service_name]
      }
    }

userRemoveServiceAction := (state, {service_name}) ->
  {
    ...state
    user: {
      ...state.user
      services: state.user.services.filter (item) -> item is not service_name
    }
  }

serviceCheck := ({service_name, checked, edit := false}) ->
  if edit
    html.div {class: "form-check"},
      html.input {
        id: `service-${service_name}`
        class: "form-check-input"
        type: "checkbox"
        checked
        onchange:
          if checked
            [userRemoveServiceAction, {service_name}]
          else
            [userAddServiceAction, {service_name}]
      }
  else
    if checked
      html.span {class: `text-success`},
        bsIcon({name: "check-square"})
    else
      html.span {class: `text-secondary`},
        bsIcon({name: "square"})

serviceTd := ({user, service, name, type}) ->
  return html.td {} unless user.services.includes(service.name)

  data := user.services_data.get(service.name)

  html.td {},
    valueDisplay {
      value: data?[name]
      type
      color:
        if user[name]
          if user[name] is data?[name]
            "success"
          else
            "danger"
        else
          "body"
    }

serviceTr := ({user, services, name, label, type}) ->
  html.tr {}, [
    html.th {}, text label
    ...(serviceTd {user, service, name, type} for each service of services)
  ]

serviceCheckTd := ({mode, user, service}) ->
  html.td {},
    serviceCheck {
      service_name: service.name
      checked: user.services.includes(service.name)
      edit: mode is not "show"
    }

export default userService := ({mode, user, services}) ->
  html.div {}, [
    html.h4 {}, text "プロバイダー登録状況"
    html.table {class: "table"}, [
      html.thead {},
        html.tr {}, [
          html.th {}, text ""
          ...(html.th({}, text entityLabel(service)) for each service of services)
        ]
      html.tbody {}, [
        html.tr {}, [
          html.th {}, text "登録"
          ...(serviceCheckTd({mode, user, service}) for each service of services)
        ]
        ...(if mode is not "new" then (serviceTr {user, services, ...item} for each item of PROVIDER_REG_ITEMS) else [])
      ]
    ]
  ]
