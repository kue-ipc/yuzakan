// プロバイダーのパラメーター

import {text} from 'hyperapp'
import * as html from '@hyperapp/html'
import {formName, formId} from '~/common/form_helper.civet'

parentNames = ['provider', 'params']

inputControlPropKeys = [
  'required', 'placeholder', 'maxlength', 'minlength', 'pattern'
  'size', 'max', 'min', 'step'
]

inputControl = (props) ->
  id = formId(props.name, parentNames)
  describeId = "#{id}-help"

  inputControlProps = Object.fromEntries([key, props[key]] for key in inputControlPropKeys when props[key]?)

  html.div {class: 'mb-3'}, [
    html.label {class: 'form-label', for: id}, text props.label
    html.input {
      id: id
      name: formName(props.name, parentNames)
      type: props.inputType
      class: 'form-control'
      value: props.value ?? (if props.encrypted? then props.default else '')
      'aria-describedby': describeId
      ...inputControlProps
      oninput: (state, event) -> [props.action, {name: props.name, value: event.target.value}]
    }
    if props.encrypted then html.small {class: 'form-text'}, text 'この項目は暗号化されて保存されます。'
    if props.description then html.small {id: describeId, class: 'form-text'}, text props.description
  ]

inputCheckbox = (props) ->
  id = formId(props.name, parentNames)
  describeId = "#{id}-help"

  html.div {class: 'form-check'}, [
    html.input {
      id: id
      name: formName(props.name, parentNames)
      type: 'checkbox'
      class: 'form-check-input'
      'aria-describedby': describeId
      checked: props.value
      onchange: (state, event) -> [props.action, {name: props.name, value: !props.value}]
    }
    html.label {class: 'form-check-label', for: id}, text props.label
    if props.description? then html.small {id: describeId, class: 'form-text'}, text props.description
  ]

inputTextareaPropKeys = ['required', 'placeholder', 'maxlength', 'minlength', 'cols', 'rows']

inputTextarea = (props) ->
  id = formId(props.name, parentNames)
  describeId = "#{id}-help"

  inputTextareaProps = Object.fromEntries([key, props[key]] for key in inputTextareaPropKeys when props[key]?)

  html.div {class: 'mb-3'}, [
    html.label {class: 'form-label', for: id}, text props.label
    html.textarea {
      id: id
      name: formName(props.name, parentNames)
      class: 'form-control'
      value: props.value ?? (if props.encrypted? then props.default else '')
      'aria-edscribedby': describeId
      ...inputTextareaProps
      oninput: (state, event) -> [props.action, {name: props.name, value: event.target.value}]
    }
    if props.encrypted? then html.small {class: 'form-text'}, text 'この項目は暗号化されて保存されます。'
    if props.description? then html.small {id: describeId, class: 'form-text'}, text props.description
  ]

inputList = (props) ->
  id = formId(props.name, parentNames)
  describeId = "#{id}-help"

  selected = props.value ?? props.default

  html.div {class: 'mb-3'}, [
    html.label {class: 'form-label', for: id}, text props.label
    html.select {
      id: id
      class: 'form-select'
      name: formName(props.name, parentNames)
      'aria-describedby': describeId
      oninput: (state, event) -> [props.action, {name: props.name, value: event.target.value}]
    },
      for item in props.list
        html.option {value: item.value, selected: selected == item.value}, text(item.label || item.name)
    if props.description? then html.small {id: describeId, class: 'form-text'}, text props.description
  ]

inputParam = (props) ->
  if props.list?
    return inputList props

  inputType = props.input ?? switch props.type
    when 'boolean' then 'checkbox'
    when 'string' then 'text'
    when 'text' then 'textarea'
    when 'integer' then 'number'
    when 'float' then 'number'
    when 'date' then 'date'
    when 'time' then 'time'
    when 'datetime' then 'datetime-local'
    when 'file' then 'file'

  switch inputType
    when 'text', 'password', 'email', 'search', 'tel', 'url', \
          'number', 'range', 'color', \
          'date', 'time', 'datetime-local', 'month', 'week'
      inputControl {...props, inputType}
    when 'checkbox'
      inputCheckbox {...props, inputType}
    when 'textarea'
      inputTextarea {...props, inputType}
    else
      text '未実装の形式です。'


export default adapterParams = ({params, param_types, ...props}) ->
  html.div {}, [
    html.h5 {},
      text 'パラメーター'
    html.div {},
      if param_types.length > 0
        for param_type in param_types
          inputParam {...props, ...param_type, value: params[param_type.name]}
      else
        text "設定できるパラメーターはありません。"
  ]
